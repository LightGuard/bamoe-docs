<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
 PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="gs-stateful-processes">
   <title>Getting started with process automation</title>
   <body>
      <p>This section provides information on how to access the technology preview and describes how to create a stateful hiring process through an example: <xref href="../getting-started/examples.html">jbpm-compact-architecture-example</xref>. This example drives a candidate through different interviews to the successful hiring decision. The example includes the use of DMN decisions to generate the candidate offer and timers to skip user tasks.</p>
      <section id="_accessing_the_technology_preview">
         <title>Accessing the technology preview</title>
         <p>The features from the technology preview can be accessed by importing the technology preview bill of materials (BOM). A bill of materials (BOM) can be added to an existing POM file by adding it to the <b>
               <i>dependencyManagement</i>
            </b> section as a dependency with a pom type:</p>
         <codeblock outputclass="language-xml">
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.ibm.bamoe&lt;/groupId&gt;
            &lt;artifactId&gt;bamoe-techpreview-bom&lt;/artifactId&gt;
            &lt;version&gt;9.1.1-ibm-0003&lt;/version&gt;
            &lt;scope&gt;import&lt;/scope&gt;
            &lt;type&gt;pom&lt;/type&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</codeblock>
         <p>See <xref href="../introduction/release-notes/version-mapping.dita">version mapping for BAMOE</xref> version 9.1.</p>
         <p>After the technology preview bill of materials is added, individual features from it can be enabled by adding relevant dependencies declared in the technology preview bill of materials to the <b>
               <i>dependencies</i>
            </b> section of an existing POM file.</p>
      </section>
      <section id="_creating_and_configuring_a_bpmn_workflow">
         <p>In this section we will focus on how to build and configure the Hiring process in Canvas.</p>
         <p>For information on setting up Canvas see <xref href="../installation/canvas.dita">Canvas installation</xref>
         </p>
         <div conref="gs-stateful-processes_create_process_variables.dita">_create_process_variables</div>
         <div conref="gs-stateful-processes_define_workflow_elements.dita">_define_workflow_elements</div>
         <div conref="gs-stateful-processes_adjust_properties_and_add_process_variables.dita">_adjust_properties_and_add_process_variables</div>
      </section>
      <section id="_using_canvas_to_create_a_new_project_using_accelerators">
         <p>For information on setting up Developer Tools for VS Code see <xref href="https://marketplace.visualstudio.com/items?itemName=IBM.bamoe-developer-tools">BAMOE Developer tools</xref>
         </p>
         <ol>
            <li>Open Canvas.</li>
            <li>Import <tt>hiring.bpmn</tt> (<xref href="hiring.bpmn.zip">sample hiring BPMN file</xref>).</li>
            <li>
               <p>Click <b>Apply accelerator</b> → <b>Quarkus (Full)</b>, and on the pop-up click <b>Apply</b>.</p>
               <fig>
                  <title>New process project with accelerator</title>
                  <image href="../images/wf-tutorial/1-new-process-project-with-accelerator.png" placement="break">
                     <alt>Process project with accelerator</alt>
                  </image>
               </fig>
            </li>
            <li>
               <p>Click "Untitled Project" and rename the project. In this example, the project 1. is named <tt>process-service-sample</tt>
               </p>
               <fig>
                  <title>Renaming project</title>
                  <image href="../images/wf-tutorial/2-renaming-project.png" placement="break">
                     <alt>Renaming project</alt>
                  </image>
               </fig>
            </li>
            <li>In this step, for learning purposes, download the project to the local development environment by clicking on <b>Share</b> → <b>All files</b>.</li>
         </ol>
         <note type="note">
Users with pre-configured git authentication can synchronize the new project on git and push it to a new repository.
</note>
      </section>
      <section id="_running_the_project_locally_with_vscode">
         <p>With the process service now available in the local development environment, unzip the project. On a command line, the project can be extracted into a new folder with:</p>
         <p>
            <tt>$ unzip process-service-sample.zip -d process-service-sample</tt>
         </p>
         <p>Open the project <tt>process-service-sample</tt> using VSCode.</p>
         <p>When using IBM BAMOE Developer Tools extension, developers can seamlesly interact with business assets directly from the developer IDE:</p>
         <fig>
            <title>Project in VS Code</title>
            <image href="../images/wf-tutorial/3-project-in-vscode.png" placement="break">
               <alt>Project in VS Code</alt>
            </image>
         </fig>
         <p>Notice the project includes the process definition and the <tt>application.properties</tt> file with generic sample configurations:</p>
         <codeblock outputclass="language-properties">
# Set up for the swagger-ui (Process-defintions)
quarkus.http.cors=true
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.swagger-ui.always-include=true
kogito.generate.rest.decisions=true
kogito.generate.rest.processes=true

# list of users for task console
quarkus.kogito-runtime-tools.users=jdoe,admin,user
quarkus.kogito-runtime-tools.users.admin.groups=admin
quarkus.kogito-runtime-tools.users.user.groups=user
quarkus.kogito-runtime-tools.users.jdoe.groups=user,admin,IT,HR
kogito.service.url=http://localhost:8080
kogito.dataindex.http.url=http://localhost:8180
kogito.dataindex.ws.url=ws://localhost:8180

# Maximum Java heap to be used during the native image generation
quarkus.native.native-image-xmx=6g
kafka.bootstrap.servers=localhost:9092

## main transport

## metadata

#mp.messaging.outgoing.kogito-processinstances-events.bootstrap.servers=localhost:9092
mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
#mp.messaging.outgoing.kogito-usertaskinstances-events.bootstrap.servers=localhost:9092
mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-usertaskinstances-events.topic=kogito-usertaskinstances-events
mp.messaging.outgoing.kogito-usertaskinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
#mp.messaging.outgoing.kogito-variables-events.bootstrap.servers=localhost:9092
mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
</codeblock>
         <p>To execute the project in the local development environment, open a new terminal in VScode and execute:</p>
         <codeblock outputclass="language-bash">
mvn clean package
</codeblock>
         <fig>
            <title>Opening a terminal in VS Code</title>
            <image href="../images/wf-tutorial/4-new-terminal-vscode.png" placement="break">
               <alt>Opening a terminal in VS Code</alt>
            </image>
         </fig>
         <p>This command should compile and package the process service into a Quarkus executable Jar file. The resulting package is the service that can later be containerized and executed on cloud platforms. The process service generated using the accelerator brings in its <tt>pom.xml</tt> file a pre-configured set of add-ons. You will need to adapt this file to meet the requirements of your service.</p>
         <p>The first execution will download the artifacts that are not yet available on the development environment</p>
      </section>
   </body>
</topic>