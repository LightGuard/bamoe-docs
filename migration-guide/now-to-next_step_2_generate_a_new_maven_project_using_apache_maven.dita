<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
 PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="_step_2_generate_a_new_maven_project_using_apache_maven">
   <title>Step 2: Generate a New Maven Project using Apache Maven</title>
   <body>
      <p>Now that you have the Maven properly configured, you can generate a new Maven project:</p>
      <ol>
         <li>In a terminal window, create a new local folder for the new Maven project, for example, <tt>/Users/developer</tt>, and navigate to that folder.</li>
         <li>
            <p>Create the project by using Quarkus and the following Maven commands.
This creates a Quarkus project called <tt>my-sample-decision-service</tt>, which is versioned <tt>1.0.0-SNAPSHOT</tt>, and includes the extensions <tt>kogito-quarkus, dmn, resteasy-reactive-jackson, quarkus-smallrye-openapi, quarkus-smallrye-health</tt>.
This also creates a Quarkus DMN project with the OpenAPI components to get the OpenAPI end points easily with health checks when deploying to Kubernetes:</p>
            <codeblock outputclass="language-console">
mvn io.quarkus:quarkus-maven-plugin:2.16.7.Final:create \
    -DprojectGroupId=com.ibm.bamoe.samples \
    -DprojectArtifactId=my-sample-decision-service \
    -DprojectVersion=1.0.0-SNAPSHOT \
    -DplatformGroupId=io.quarkus.platform \
    -DplatformArtifactId=quarkus-bom \
    -DplatformVersion=2.16.7.Final \
    -Dextensions=kogito-quarkus,dmn,resteasy-reactive-jackson,quarkus-smallrye-openapi,quarkus-smallrye-health
</codeblock>
         </li>
      </ol>
      <note type="note">
         <p>As you can see from the Maven command, there are a number of possible <tt>extensions</tt> that can be added to the project for the specific functionality.
You can find more information on available extensions at the following locations:  <xref href="https://quarkus.io/extensions/" scope="external">Quarkus Extensions</xref>, and <xref href="https://quarkus.io/extensions/?search-regex=kogito" scope="external">Kogito Extensions</xref>.</p>
      </note>
      <p>When you create this project, you might get a bunch of Maven artifacts start to stream in your console that are being pulled, and ultimately, you are left with a console message like the following:</p>
      <codeblock outputclass="language-console">
[INFO]
[INFO] ========================================================================================
[INFO] Your new application has been created in /Users/developer/my-sample-decision-service
[INFO] Navigate into this directory and launch your application with mvn quarkus:dev
[INFO] Your application will be accessible on http://localhost:8080
[INFO] ========================================================================================
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  24.548 s
[INFO] Finished at: 2022-09-27T10:22:31-04:00
[INFO] ------------------------------------------------------------------------
</codeblock>
      <ol>
         <li>Add the following <tt>properties</tt> to the <tt>pom.xml</tt> file by using the row numbers as a guide.
This specifies the Maven coordinates for the BAMOE Maven Bill-of-Materials (BOM), which manages all of the associated dependency versions for a specific BAMOE release:</li>
      </ol>
      <codeblock outputclass="language-xml">
17        &lt;surefire-plugin.version&gt;3.0.0-M7&lt;/surefire-plugin.version&gt;
18  +++   &lt;kogito.bom.group-id&gt;com.ibm.bamoe&lt;/kogito.bom.group-id&gt;
19  +++   &lt;kogito.bom.artifact-id&gt;bamoe-bom&lt;/kogito.bom.artifact-id&gt;
20  +++   &lt;kogito.bom.version&gt;9.0.1.Final&lt;/kogito.bom.version&gt;
21      &lt;/properties&gt;
</codeblock>
      <ol>
         <li>
            <p>Replace lines 29-31, which essentially add the <tt>bamoe-bom</tt> to the list of imported dependencies:</p>
            <codeblock outputclass="language-xml">
28      &lt;dependency&gt;
29  ---   &lt;groupId&gt;${quarkus.platform.group-id}&lt;/groupId&gt;
30  ---   &lt;artifactId&gt;quarkus-kogito-bom&lt;/artifactId&gt;
31  ---   &lt;version&gt;${quarkus.platform.version}&lt;/version&gt;
29  +++   &lt;groupId&gt;${kogito.bom.group-id}&lt;/groupId&gt;
30  +++   &lt;artifactId&gt;${kogito.bom.artifact-id}&lt;/artifactId&gt;
31  +++   &lt;version&gt;${kogito.bom.version}&lt;/version&gt;
32        &lt;type&gt;pom&lt;/type&gt;
33        &lt;scope&gt;import&lt;/scope&gt;
34      &lt;/dependency&gt;
</codeblock>
            <p>A bill of materials (BOM) is a list of parts or components that are required to build a product.
BOMs are ordinary <tt>pom.xml</tt> files that contain no source code, and their only purpose is to declare their bundled modules.</p>
         </li>
      </ol>
      <note type="important">
         <p>It is recommended to use a bill of materials (BOM) to manage project dependencies, as it simplifies dependency management by organizing a group of dependencies under a single version.</p>
         <p>It must be noted that the use of a Maven bill-of-materials (BOM) does not add any dependencies to the project.
Rather, it functions as a reference for managing the versions of your project’s dependencies (and transient dependencies).</p>
      </note>
      <p>A bill of materials (BOM) can be added to an existing POM file by adding it to the <b>
            <i>dependencyManagement</i>
         </b> section as a dependency with a pom type:</p>
      <codeblock outputclass="language-xml">
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.redhat.ba&lt;/groupId&gt;
            &lt;artifactId&gt;ba-platform-bom&lt;/artifactId&gt;
            &lt;version&gt;&lt;!-- See Version Mapping Table --&gt;&lt;/version&gt;
            &lt;scope&gt;import&lt;/scope&gt;
            &lt;type&gt;pom&lt;/type&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</codeblock>
      <p>When a bill of materials (BOM) is used, it is not necessary to specify the dependency’s version, as that appears from the BOM, so your dependencies end up like the following:</p>
      <codeblock outputclass="language-xml">
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.drools&lt;/groupId&gt;
        &lt;artifactId&gt;drools-compiler&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</codeblock>
      <note type="note">
         <p>During the course of your Maven dependency update, if you encounter any dependencies that are not included in the bill of materials (BOM), then use the Maven Library version noted in the following table:</p>
         <codeblock outputclass="language-xml">
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.drools&lt;/groupId&gt;
        &lt;artifactId&gt;drools-compiler&lt;/artifactId&gt;
        &lt;version&gt;8.40.0.Final&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</codeblock>
         <p>You must also report to IBM that a dependency is missing so that the problem can be resolved in the next release.</p>
      </note>
      <p>See <xref href="../introduction/release-notes/version-mapping.dita">version mapping for BAMOE version 9.1.x</xref>.</p>
      <ol>
         <li>
            <p>Add the <tt>IBM ILMT Compliance Library</tt> to the <tt>pom.xml</tt>
               <i>(this is required to report on subscription entitlement usage within the system)</i>:</p>
            <codeblock outputclass="language-xml">
77  +++   &lt;dependency&gt;
78  +++     &lt;groupId&gt;com.ibm.bamoe&lt;/groupId&gt;
79  +++     &lt;artifactId&gt;bamoe-ilmt-compliance-quarkus-dmoe&lt;/artifactId&gt;
80  +++   &lt;/dependency&gt;
81      &lt;/dependencies&gt;
</codeblock>
         </li>
      </ol>
      <note type="note">
         <p>You might notice that the newly added Maven dependency includes the <tt>groupId</tt> and <tt>artifactId</tt> portions of the Maven coordinates but does not specify a <tt>version</tt> tag.
This is due to importing the <tt>bamoe-bom</tt> into the project, where the various dependency versions are managed.</p>
      </note>
      <ol>
         <li>
            <p>Build the project in the root folder:</p>
            <codeblock outputclass="language-console">
mvn clean package
</codeblock>
            <p>You might get Maven streaming text once again, and at the end of it you must have:</p>
            <codeblock outputclass="language-console">
[INFO] Analysing decision tables in DMN Model 'pricing' ...
[INFO]  analysis for decision table 'Base price':
[INFO]   Decision Table Analysis of table 'Base price' finished with no messages to be reported.
[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 3012ms
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  16.084 s
[INFO] Finished at: 2023-06-28T14:22:02-03:00
[INFO] ------------------------------------------------------------------------
</codeblock>
         </li>
      </ol>
      <note type="note">
         <p>The choice of extensions determine the imported behavior of the project including adding sample models or testing related code.
For example, by adding the 'dmn' extension, it not only adds the proper dependencies but also adds a sample <tt>.dmn</tt> model to the project, which acts as a template to work on.</p>
      </note>
      <p>After the project is generated, you must see a project structure in VS Code, similar to the following diagram:</p>
      <fig>
         <title>Example Maven Project in VS Code</title>
         <image href="../images/maven-project.png" placement="break">
            <alt>Example Maven Project in VS Code</alt>
         </image>
      </fig>
      <p>As you can see from the figure, a Maven compliant project is generated, including all of the standard folders typically found in a Maven project.
The most significant folder is the <tt>resources</tt> folder, which is where new or migrated business automation asset files must be stored.
Examples of supported business automation assets are:</p>
      <ul>
         <li>Decision Model &amp; Notation (DMN) Models (.dmn)</li>
         <li>Drools Rule Language (DRL) Files (.drl)</li>
         <li>Business Process Modeling &amp; Notation (BPMN) Models (.bpmn)</li>
         <li>Excel Decision Tables Excel Files (.xlsx)</li>
         <li>Standard Property Files (.properties)</li>
         <li>Test Scenario Files (.scesim)</li>
      </ul>
      <note type="note">
         <p>The proper folder for unit test files is <tt>src/test/resources</tt>, as this is a testing resource.</p>
      </note>
   </body>
</topic>