<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
 PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="_ibm_bamoe_process_event_add_on">
   <title>IBM BAMOE process event add-on</title>
   <body>
      <p>IBM BAMOE provides a process event add-on, which you can use to send processes, tasks, and variable events to an external event listener. In this case, the processes, tasks, and variable events are generated as a result of the execution of an operation, which modifies a process state; such events are known as runtime events.</p>
      <p>In IBM BAMOE, every modifying operation is executed within an abstraction called a unit of work. Examples of such operations include creating a process instance, transitioning a task, and modifying a variable. A runtime event is published when a unit of work is completed.</p>
      <p>You can use the IBM BAMOE process event add-on to build a historical representation of all process instance executions. Also, you can use this add-on with process REST API to build a custom graphical user interface to handle the user tasks.</p>
      <p>By default, the event format follows the <xref href="https://cloudevents.io/" scope="external">CloudEvent</xref> specification, sending information using the data field.
The data field contains a JSON of one of the following types:</p>
      <ul>
         <li>
            <xref href="https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-events-api/src/main/java/org/kie/kogito/event/process/ProcessInstanceEventMetadata.java" scope="external">ProcessInstanceEvent</xref>: This event is published when a process instance is created, modified, or completed.</li>
         <li>
            <xref href="https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-events-api/src/main/java/org/kie/kogito/event/process/ProcessInstanceVariableEventBody.java" scope="external">VariableInstanceEvent</xref>: This event is published when a variable is created, modified, or removed.</li>
      </ul>
      <p>To configure process event capabilities for your IBM BAMOE services, you can add the process event add-on as a dependency in the <tt>pom.xml</tt> file of your IBM BAMOE project:</p>
      <p outputclass="title">
         <b>Project dependency to enable process event operations in Quarkus projects</b>
      </p>
      <codeblock outputclass="language-xml">
&lt;dependency&gt;
  &lt;groupId&gt;org.kie&lt;/groupId&gt;
  &lt;artifactId&gt;kie-addons-quarkus-events-process&lt;/artifactId&gt;
&lt;/dependency&gt;
</codeblock>
      <p>For Quarkus, the IBM BAMOE process event add-on implementation is based on <xref href="https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2/connectors/connectors.html" scope="external">Smallrye Messaging</xref> library, which provides a set of connectors for event brokers, such as JMS, AMQP, and Kafka. Therefore, the IBM BAMOE process event add-on is not specifically combined with any event broker in Quarkus, but requires additional configuration to use a suitable Smallrye connector.</p>
      <p>For example, to use Kafka as an event broker in Quarkus, you can add the following dependency in the <tt>pom.xml</tt> file of your IBM BAMOE project:</p>
      <p outputclass="title">
         <b>Project dependency to enable Kafka event broker in Quarkus</b>
      </p>
      <codeblock outputclass="language-xml">
 &lt;dependency&gt;
  	&lt;groupId&gt;io.quarkus&lt;/groupId&gt;
  	&lt;artifactId&gt;quarkus-smallrye-reactive-messaging-kafka&lt;/artifactId&gt;
&lt;/dependency&gt;
</codeblock>
      <p>Smallrye defines an abstraction named channel to enable multi-broker support. For every channel that you define in your IBM BAMOE application, you can specify the connector to use for that channel using the following form:</p>
      <p>
         <tt>mp.messaging.[incoming|outgoing].&lt;channel name&gt;.connector = &lt;connector name&gt;</tt>
      </p>
      <p>Optionally, for Kafka connector, you can define the Kafka topic to be used for that channel using the following form:</p>
      <p>
         <tt>mp.messaging.[incoming|outgoing].&lt;channel name&gt;.topic = &lt;topic name&gt;</tt>
      </p>
      <p>You can also set up a channel property using the following form:</p>
      <p>
         <tt>mp.messaging.[incoming|outgoing].&lt;channel name&gt;.&lt;property name&gt;= &lt;property value&gt;</tt>
      </p>
      <note type="important">
If the defined property is not found, then the topic name is considered to be the same as Kafka name.
</note>
      <p>The IBM BAMOE process event add-on defines a channel for each event type, such as <tt>kogito-processinstances-events</tt>, <tt>kogito-usertaskinstances-events</tt>, and <tt>kogito-variables-events</tt>. Therefore, when the process event add-on is enabled, you must add the event types to your <tt>application.properties</tt> file using the following properties:</p>
      <p outputclass="title">
         <b>Properties to define event types in <tt>application.properties</tt> file</b>
      </p>
      <codeblock>
mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-usertaskinstances-events.topic=kogito-usertaskinstances-events
mp.messaging.outgoing.kogito-usertaskinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
</codeblock>
      <p>Additionally, you can disable the publishing on any channel by setting the related property to false as shown in the following example:</p>
      <p outputclass="title">
         <b>Example properties to disable publishing</b>
      </p>
      <codeblock>
kogito.events.usertasks.enabled=false
kogito.events.variables.enabled=false
</codeblock>
   </body>
</topic>