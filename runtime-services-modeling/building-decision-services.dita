<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
 PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="building-decision-services">
   <title>Building decision services</title>
   <body>
      <section id="proc-kogito-creating-project">
         <title>Creating a Maven project for a IBM BAMOE service using BAMOE Canvas</title>
         <p>Before you can begin developing IBM BAMOE services, you need to create a Maven project where you can build your IBM BAMOE assets and any other related resources for your application.</p>
         <p outputclass="title">
            <b>Procedure</b>
         </p>
         <ol>
            <li>Run BAMOE Canvas - see the <xref href="../installation/canvas.dita">installation</xref> chapter for more details on how to install and run it.</li>
            <li>If you do not already have a project or an asset file, create a DMN or BPMN file.</li>
            <li>Use the <xref href="../tools/applying-accelerators.dita">accelerator</xref> functionality in BAMOE Canvas to create a project that is buildable and deployable.</li>
         </ol>
      </section>
      <section id="_building_the_project">
         <p outputclass="title">
            <b>Procedure</b>
         </p>
         <ol>
            <li>Download the (project).zip archive to a local directory and extract the file.</li>
            <li>In a command terminal, navigate to the extracted folder, and enter one of the following commands to build the project.</li>
         </ol>
         <p>Quarkus support the following building modes:</p>
         <ul>
            <li>
               <b>JVM mode</b>: For compatibility with a Java virtual machine (JVM).</li>
            <li>
               <b>Native mode</b>: (Quarkus only, requires GraalVM or Mandrel) For direct binary execution as native code.</li>
         </ul>
         <p>The command that you use depends on your preferred run mode and application environment:</p>
         <ul>
            <li>
               <p>For JVM mode:</p>
               <p outputclass="title">
                  <b>On Quarkus</b>
               </p>
               <codeblock>
$ mvn clean package
</codeblock>
            </li>
            <li>
               <p>For native mode (requires GraalVM or Mandrel):</p>
               <p outputclass="title">
                  <b>On Quarkus only</b>
               </p>
               <codeblock>
$ mvn clean package -Dnative
</codeblock>
            </li>
         </ul>
      </section>
      <section id="_ibm_bamoe_add_ons">
         <p>You can extend IBM BAMOE core capabilities by using add-ons modules. The add-on modules extend monitoring, messaging, and other features of IBM BAMOE services.</p>
         <p>The following tables list all the supported add-ons in IBM BAMOE:</p>
         <table>
            <title>IBM BAMOE add-ons for Quarkus</title>
            <tgroup cols="2">
               <colspec colname="col_1" colwidth="50*"/>
               <colspec colname="col_2" colwidth="50*"/>
               <tbody>
                  <row>
                     <entry>
                        <p>Name</p>
                     </entry>
                     <entry>
                        <p>Artifact Id</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Messaging</p>
                     </entry>
                     <entry>
                        <p>kie-addons-quarkus-messaging</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Events Decisions</p>
                     </entry>
                     <entry>
                        <p>kie-addons-quarkus-events-decisions</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Events Process</p>
                     </entry>
                     <entry>
                        <p>kie-addons-quarkus-events-process</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Knative Eventing</p>
                     </entry>
                     <entry>
                        <p>kie-addons-quarkus-knative-eventing</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Mail</p>
                     </entry>
                     <entry>
                        <p>jbpm-addons-quarkus-mail</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Elastic Monitoring</p>
                     </entry>
                     <entry>
                        <p>kie-addons-quarkus-monitoring-elastic</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Prometheus Monitoring</p>
                     </entry>
                     <entry>
                        <p>kie-addons-quarkus-monitoring-prometheus</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Tracing Decision</p>
                     </entry>
                     <entry>
                        <p>kogito-addons-quarkus-tracing-decision</p>
                     </entry>
                  </row>
                  <row>
                     <entry>
                        <p>Source Files</p>
                     </entry>
                     <entry>
                        <p>kie-addons-quarkus-source-files</p>
                     </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
         <div conref="building-decision-services_ibm_bamoe_messaging_add_on.dita">_ibm_bamoe_messaging_add_on</div>
         <div conref="building-decision-services_ibm_bamoe_decision_model_and_notation_dmn_event_driven_add_on.dita">_ibm_bamoe_decision_model_and_notation_dmn_event_driven_add_on</div>
         <div conref="building-decision-services_ibm_bamoe_knative_eventing_add_on.dita">_ibm_bamoe_knative_eventing_add_on</div>
         <div conref="building-decision-services_ibm_bamoe_mail_add_on.dita">_ibm_bamoe_mail_add_on</div>
         <div conref="building-decision-services_ibm_bamoe_events_add_on.dita">_ibm_bamoe_events_add_on</div>
         <div conref="building-decision-services_ibm_bamoe_monitoring_add_on.dita">_ibm_bamoe_monitoring_add_on</div>
         <div conref="building-decision-services_ibm_bamoe_process_event_add_on.dita">_ibm_bamoe_process_event_add_on</div>
         <div conref="building-decision-services_ibm_bamoe_tracing_add_on.dita">_ibm_bamoe_tracing_add_on</div>
         <div conref="building-decision-servicessource-files-add-on.dita">source-files-add-on</div>
      </section>
      <section id="proc-kogito-designing-app">
         <p>After you create your IBM BAMOE project, you can create or import Business Process Model and Notation (BPMN) 2.0 business processes, Decision Model and Notation (DMN) decision models, Drools Rule Language (DRL) business rules, XLS or XLSX decision tables, and other assets in the <tt>src/main/resources</tt> folder of your project. You can also include Java classes in the <tt>src/main/java</tt> folder of your project that act as Java services or provide implementations that you call from your business processes or decisions.</p>
         <p>The example for this procedure is a basic IBM BAMOE service that provides a REST endpoint <tt>/persons</tt>. This endpoint is automatically generated based on an example <tt>PersonProcess.bpmn2</tt> business process that employs an example <tt>PersonDecisions.dmn</tt> DMN model to make decisions based on the data being processed.</p>
         <p>The business process contains the business logic of the IBM BAMOE service. The process provides the complete set of steps to achieve the business goal. The process is also the entry point to the service that can be consumed by other services.</p>
         <p>The business decision contains the decision logic of the IBM BAMOE service. In this example, the decision logic is invoked as part of the business process. You can define business rules and decisions in several ways, such as with DMN models, DRL rules, or XLS or XLSX decision tables. The example for this procedure uses a DMN model.</p>
         <p outputclass="title">
            <b>Procedure</b>
         </p>
         <ol>
            <li>
               <p>In the Maven project that you generated for your IBM BAMOE service, navigate to the <tt>src/main/java/org/acme</tt> folder and add the following <tt>Person.java</tt> file:</p>
               <div>
                  <p outputclass="title">
                     <b>Example person Java object</b>
                  </p>
                  <codeblock outputclass="language-java">
package org.acme;

import java.io.Serializable;

public class Person {

	private String name;
	private int age;
	private boolean adult;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public boolean isAdult() {
		return adult;
	}

	public void setAdult(boolean adult) {
		this.adult = adult;
	}

	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + ", adult=" + adult + "]";
	}

}
</codeblock>
                  <p>This example Java object sets and retrieves a personâ€™s name, age, and adult status.</p>
               </div>
            </li>
            <li>
               <p>Navigate to the <tt>src/main/resources</tt> folder and add the following <tt>PersonDecisions.dmn</tt> DMN decision model:</p>
               <div>
                  <fig>
                     <title>Example <tt>PersonDecisions</tt> DMN decision requirements diagram (DRD)</title>
                     <image href="../images/kogito-dmn-example-person.png" placement="break">
                        <alt>Image of PersonDecisions decision diagram</alt>
                     </image>
                  </fig>
                  <fig>
                     <title>Example DMN boxed expression for <tt>isAdult</tt> decision</title>
                     <image href="../images/kogito-dmn-example-person-logic.png" placement="break">
                        <alt>Image of PersonDecisions decision table</alt>
                     </image>
                  </fig>
                  <fig>
                     <title>Example DMN data types</title>
                     <image href="../images/kogito-dmn-example-person-data-types.png" placement="break">
                        <alt>Image of PersonDecisions data types</alt>
                     </image>
                  </fig>
                  <p>This example DMN model consists of a basic DMN input node and a decision node defined by a DMN decision table with a custom structured data type.</p>
                  <p>In VSCode (recommended), you can add the <xref href="https://marketplace.visualstudio.com/items?itemName=IBM.bamoe-developer-tools" scope="external">
                        <b>IBM BAMOE Developer Tools for VS Code</b>
                     </xref> to design the decision requirements diagram (DRD), boxed expression, and data types with the IBM BAMOE DMN modeler.</p>
                  <p>To create this example DMN model quickly, you can copy the following <tt>PersonDecisions.dmn</tt> file content:</p>
                  <p outputclass="title">
                     <b>Example DMN file</b>
                  </p>
                  <codeblock outputclass="language-xml">
&lt;dmn:definitions xmlns:dmn="http://www.omg.org/spec/DMN/20180521/MODEL/" xmlns="https://kiegroup.org/dmn/_52CEF9FD-9943-4A89-96D5-6F66810CA4C1" xmlns:di="http://www.omg.org/spec/DMN/20180521/DI/" xmlns:kie="http://www.drools.org/kie/dmn/1.2" xmlns:dmndi="http://www.omg.org/spec/DMN/20180521/DMNDI/" xmlns:dc="http://www.omg.org/spec/DMN/20180521/DC/" xmlns:feel="http://www.omg.org/spec/DMN/20180521/FEEL/" id="_84B432F5-87E7-43B1-9101-1BAFE3D18FC5" name="PersonDecisions" typeLanguage="http://www.omg.org/spec/DMN/20180521/FEEL/" namespace="https://kiegroup.org/dmn/_52CEF9FD-9943-4A89-96D5-6F66810CA4C1"&gt;
  &lt;dmn:extensionElements/&gt;
  &lt;dmn:itemDefinition id="_DEF2C3A7-F3A9-4ABA-8D0A-C823E4EB43AB" name="tPerson" isCollection="false"&gt;
    &lt;dmn:itemComponent id="_DB46DB27-0752-433F-ABE3-FC9E3BDECC97" name="Age" isCollection="false"&gt;
      &lt;dmn:typeRef&gt;number&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_8C6D865F-E9C8-43B0-AB4D-3F2075A4ECA6" name="Name" isCollection="false"&gt;
      &lt;dmn:typeRef&gt;string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_9033704B-4E1C-42D3-AC5E-0D94107303A1" name="Adult" isCollection="false"&gt;
      &lt;dmn:typeRef&gt;boolean&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
  &lt;/dmn:itemDefinition&gt;
  &lt;dmn:inputData id="_F9685B74-0C69-4982-B3B6-B04A14D79EDB" name="Person"&gt;
    &lt;dmn:extensionElements/&gt;
    &lt;dmn:variable id="_0E345A3C-BB1F-4FB2-B00F-C5691FD1D36C" name="Person" typeRef="tPerson"/&gt;
  &lt;/dmn:inputData&gt;
  &lt;dmn:decision id="_0D2BD7A9-ACA1-49BE-97AD-19699E0C9852" name="isAdult"&gt;
    &lt;dmn:extensionElements/&gt;
    &lt;dmn:variable id="_54CD509F-452F-40E5-941C-AFB2667D4D45" name="isAdult" typeRef="boolean"/&gt;
    &lt;dmn:informationRequirement id="_2F819B03-36B7-4DEB-AED6-2B46AE3ADB75"&gt;
      &lt;dmn:requiredInput href="#_F9685B74-0C69-4982-B3B6-B04A14D79EDB"/&gt;
    &lt;/dmn:informationRequirement&gt;
    &lt;dmn:decisionTable id="_58370567-05DE-4EC0-AC2D-A23803C1EAAE" hitPolicy="UNIQUE" preferredOrientation="Rule-as-Row"&gt;
      &lt;dmn:input id="_ADEF36CD-286A-454A-ABD8-9CF96014021B"&gt;
        &lt;dmn:inputExpression id="_4930C2E5-7401-46DD-8329-EAC523BFA492" typeRef="number"&gt;
          &lt;dmn:text&gt;Person.Age&lt;/dmn:text&gt;
        &lt;/dmn:inputExpression&gt;
      &lt;/dmn:input&gt;
      &lt;dmn:output id="_9867E9A3-CBF6-4D66-9804-D2206F6B4F86" typeRef="boolean"/&gt;
      &lt;dmn:rule id="_59D6BFF0-35B4-4B7E-8D7B-E31CB0DB8242"&gt;
        &lt;dmn:inputEntry id="_7DC55D63-234F-497B-A12A-93DA358C0136"&gt;
          &lt;dmn:text&gt;&amp;gt; 18&lt;/dmn:text&gt;
        &lt;/dmn:inputEntry&gt;
        &lt;dmn:outputEntry id="_B3BB5B97-05B9-464A-AB39-58A33A9C7C00"&gt;
          &lt;dmn:text&gt;true&lt;/dmn:text&gt;
        &lt;/dmn:outputEntry&gt;
      &lt;/dmn:rule&gt;
      &lt;dmn:rule id="_8FCD63FE-8AD8-4F56-AD12-923E87AFD1B1"&gt;
        &lt;dmn:inputEntry id="_B4EF7F13-E486-46CB-B14E-1D21647258D9"&gt;
          &lt;dmn:text&gt;&amp;lt;= 18&lt;/dmn:text&gt;
        &lt;/dmn:inputEntry&gt;
        &lt;dmn:outputEntry id="_F3A9EC8E-A96B-42A0-BF87-9FB1F2FDB15A"&gt;
          &lt;dmn:text&gt;false&lt;/dmn:text&gt;
        &lt;/dmn:outputEntry&gt;
      &lt;/dmn:rule&gt;
    &lt;/dmn:decisionTable&gt;
  &lt;/dmn:decision&gt;
  &lt;dmndi:DMNDI&gt;
    &lt;dmndi:DMNDiagram&gt;
      &lt;di:extension&gt;
        &lt;kie:ComponentsWidthsExtension&gt;
          &lt;kie:ComponentWidths dmnElementRef="_58370567-05DE-4EC0-AC2D-A23803C1EAAE"&gt;
            &lt;kie:width&gt;50&lt;/kie:width&gt;
            &lt;kie:width&gt;100&lt;/kie:width&gt;
            &lt;kie:width&gt;100&lt;/kie:width&gt;
            &lt;kie:width&gt;100&lt;/kie:width&gt;
          &lt;/kie:ComponentWidths&gt;
        &lt;/kie:ComponentsWidthsExtension&gt;
      &lt;/di:extension&gt;
      &lt;dmndi:DMNShape id="dmnshape-_F9685B74-0C69-4982-B3B6-B04A14D79EDB" dmnElementRef="_F9685B74-0C69-4982-B3B6-B04A14D79EDB" isCollapsed="false"&gt;
        &lt;dmndi:DMNStyle&gt;
          &lt;dmndi:FillColor red="255" green="255" blue="255"/&gt;
          &lt;dmndi:StrokeColor red="0" green="0" blue="0"/&gt;
          &lt;dmndi:FontColor red="0" green="0" blue="0"/&gt;
        &lt;/dmndi:DMNStyle&gt;
        &lt;dc:Bounds x="404" y="464" width="100" height="50"/&gt;
        &lt;dmndi:DMNLabel/&gt;
      &lt;/dmndi:DMNShape&gt;
      &lt;dmndi:DMNShape id="dmnshape-_0D2BD7A9-ACA1-49BE-97AD-19699E0C9852" dmnElementRef="_0D2BD7A9-ACA1-49BE-97AD-19699E0C9852" isCollapsed="false"&gt;
        &lt;dmndi:DMNStyle&gt;
          &lt;dmndi:FillColor red="255" green="255" blue="255"/&gt;
          &lt;dmndi:StrokeColor red="0" green="0" blue="0"/&gt;
          &lt;dmndi:FontColor red="0" green="0" blue="0"/&gt;
        &lt;/dmndi:DMNStyle&gt;
        &lt;dc:Bounds x="404" y="311" width="100" height="50"/&gt;
        &lt;dmndi:DMNLabel/&gt;
      &lt;/dmndi:DMNShape&gt;
      &lt;dmndi:DMNEdge id="dmnedge-_2F819B03-36B7-4DEB-AED6-2B46AE3ADB75" dmnElementRef="_2F819B03-36B7-4DEB-AED6-2B46AE3ADB75"&gt;
        &lt;di:waypoint x="504" y="489"/&gt;
        &lt;di:waypoint x="404" y="336"/&gt;
      &lt;/dmndi:DMNEdge&gt;
    &lt;/dmndi:DMNDiagram&gt;
  &lt;/dmndi:DMNDI&gt;
&lt;/dmn:definitions&gt;
</codeblock>
                  <p>To create this example DMN model in VSCode using the IBM BAMOE DMN modeler, follow these steps:</p>
                  <ol>
                     <li>Open the empty <tt>PersonDecisions.dmn</tt> file and in the upper-right corner of the DMN modeler, click the <b>Properties</b> icon and confirm that the DMN model <b>Name</b> is set to <tt>PersonDecisions</tt>.</li>
                     <li>In the left palette, select <b>DMN Input Data</b>, drag the node to the canvas, and double-click the node to name it <tt>Person</tt>.</li>
                     <li>In the left palette, select <b>DMN Decision</b>, drag the node to the canvas, double-click the node to name it <tt>isAdult</tt>, and link to it from the input node.</li>
                     <li>Select the decision node to display the node options and click the <b>Edit</b> icon to open the DMN boxed expression editor to define the decision logic for the node.</li>
                     <li>Click the undefined expression field and select <b>Decision Table</b>.</li>
                     <li>Click the upper-left corner of the decision table to set the hit policy to <b>Unique</b>.</li>
                     <li>
                        <p>Set the input and output columns so that the input source <tt>Person.Age</tt> with type <tt>number</tt> determines the age limit and the output target <tt>isAdult</tt> with type <tt>boolean</tt> determines adult status:</p>
                        <fig>
                           <title>Example DMN decision table for <tt>isAdult</tt> decision</title>
                           <image href="../images/kogito-dmn-example-person-logic.png" placement="break">
                              <alt>Image of PersonDecisions decision table</alt>
                           </image>
                        </fig>
                     </li>
                     <li>
                        <p>In the upper tab options, select the <b>Data Types</b> tab and add the following <tt>tPerson</tt> structured data type and nested data types:</p>
                        <fig>
                           <title>Example DMN data types</title>
                           <image href="../images/kogito-dmn-example-person-data-types.png" placement="break">
                              <alt>Image of PersonDecisions data types</alt>
                           </image>
                        </fig>
                     </li>
                     <li>After you define the data types, select the <b>Editor</b> tab to return to the DMN modeler canvas.</li>
                     <li>Select the <b>Person</b> input node, click the <b>Properties</b> icon, and under <b>Information item</b>, set the <b>Data type</b> to <tt>tPerson</tt>.</li>
                     <li>Select the <b>isAdult</b> decision node, click the <b>Properties</b> icon, and under <b>Information item</b>, confirm that the <b>Data type</b> is still set to <tt>boolean</tt>. You previously set this data type when you created the decision table.</li>
                     <li>Save the DMN decision file.</li>
                  </ol>
               </div>
            </li>
            <li>
               <p>In the <tt>src/main/resources</tt> folder, add the following <tt>PersonProcess.bpmn2</tt> BPMN process model:</p>
               <div>
                  <fig>
                     <title>Example <tt>PersonProcess</tt> BPMN process</title>
                     <image href="../images/kogito-bpmn-example-person.png" placement="break">
                        <alt>Image of person process diagram</alt>
                     </image>
                  </fig>
                  <p>This example process consists of the following basic BPMN components:</p>
                  <ul>
                     <li>Start event</li>
                     <li>Business rule task</li>
                     <li>Exclusive gateway</li>
                     <li>User task</li>
                     <li>End events</li>
                  </ul>
                  <p>In VSCode (recommended), you can add the <xref href="https://marketplace.visualstudio.com/items?itemName=IBM.bamoe-developer-tools" scope="external">
                        <b>IBM BAMOE Developer Tools for VS Code</b>
                     </xref> to model the business process with the IBM BAMOE BPMN modeler.</p>
                  <p>To create this example process quickly, you can copy the following <tt>PersonProcess.bpmn2</tt> file content:</p>
                  <p outputclass="title">
                     <b>Example BPMN file</b>
                  </p>
                  <codeblock outputclass="language-xml">
&lt;bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:bpsim="http://www.bpsim.org/schemas/1.0" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:drools="http://www.jboss.org/drools" id="_J4ElsVJgEDiScotxwBQ14Q" exporter="jBPM Process Modeler" exporterVersion="2.0" targetNamespace="http://www.omg.org/bpmn20"&gt;
  &lt;bpmn2:itemDefinition id="_personItem" structureRef="org.acme.Person"/&gt;
  &lt;bpmn2:itemDefinition id="_isAdultItem" structureRef="Boolean"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_SkippableInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_PriorityInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_CommentInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_DescriptionInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_CreatedByInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_TaskNameInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_GroupIdInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_ContentInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_NotStartedReassignInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_NotCompletedReassignInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_NotStartedNotifyInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_NotCompletedNotifyInputXItem" structureRef="Object"/&gt;
  &lt;bpmn2:itemDefinition id="_UserTask_1_personInputXItem" structureRef="org.acme.Person"/&gt;
  &lt;bpmn2:itemDefinition id="_BusinessRuleTask_1_namespaceInputXItem" structureRef="java.lang.String"/&gt;
  &lt;bpmn2:itemDefinition id="_BusinessRuleTask_1_modelInputXItem" structureRef="java.lang.String"/&gt;
  &lt;bpmn2:itemDefinition id="_BusinessRuleTask_1_decisionInputXItem" structureRef="java.lang.String"/&gt;
  &lt;bpmn2:itemDefinition id="_BusinessRuleTask_1_PersonInputXItem" structureRef="org.acme.Person"/&gt;
  &lt;bpmn2:itemDefinition id="_BusinessRuleTask_1_isAdultOutputXItem" structureRef="Boolean"/&gt;
  &lt;bpmn2:process id="persons" drools:packageName="org.acme" drools:version="1.0" drools:adHoc="false" name="Person Process" isExecutable="true" processType="Public"&gt;
    &lt;bpmn2:property id="person" itemSubjectRef="_personItem" name="person"/&gt;
    &lt;bpmn2:property id="isAdult" itemSubjectRef="_isAdultItem" name="isAdult"/&gt;
    &lt;bpmn2:sequenceFlow id="SequenceFlow_1" sourceRef="StartEvent_1" targetRef="BusinessRuleTask_1"/&gt;
    &lt;bpmn2:sequenceFlow id="SequenceFlow_2" sourceRef="BusinessRuleTask_1" targetRef="ExclusiveGateway_1"/&gt;
    &lt;bpmn2:sequenceFlow id="SequenceFlow_3" sourceRef="ExclusiveGateway_1" targetRef="UserTask_1"&gt;
      &lt;bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" language="http://www.java.com/java"&gt;return isAdult == false;&lt;/bpmn2:conditionExpression&gt;
    &lt;/bpmn2:sequenceFlow&gt;
    &lt;bpmn2:sequenceFlow id="SequenceFlow_4" sourceRef="UserTask_1" targetRef="EndEvent_1"/&gt;
    &lt;bpmn2:sequenceFlow id="SequenceFlow_5" sourceRef="ExclusiveGateway_1" targetRef="EndEvent_2"&gt;
      &lt;bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" language="http://www.java.com/java"&gt;return isAdult == true;&lt;/bpmn2:conditionExpression&gt;
    &lt;/bpmn2:sequenceFlow&gt;
    &lt;bpmn2:startEvent id="StartEvent_1" name="StartProcess"&gt;
      &lt;bpmn2:extensionElements&gt;
        &lt;drools:metaData name="elementname"&gt;
          &lt;drools:metaValue&gt;StartProcess&lt;/drools:metaValue&gt;
        &lt;/drools:metaData&gt;
      &lt;/bpmn2:extensionElements&gt;
      &lt;bpmn2:outgoing&gt;SequenceFlow_1&lt;/bpmn2:outgoing&gt;
    &lt;/bpmn2:startEvent&gt;
    &lt;bpmn2:businessRuleTask id="BusinessRuleTask_1" name="Evaluate person" implementation="http://www.jboss.org/drools/dmn"&gt;
      &lt;bpmn2:extensionElements&gt;
        &lt;drools:metaData name="elementname"&gt;
          &lt;drools:metaValue&gt;Evaluate person&lt;/drools:metaValue&gt;
        &lt;/drools:metaData&gt;
      &lt;/bpmn2:extensionElements&gt;
      &lt;bpmn2:incoming&gt;SequenceFlow_1&lt;/bpmn2:incoming&gt;
      &lt;bpmn2:outgoing&gt;SequenceFlow_2&lt;/bpmn2:outgoing&gt;
      &lt;bpmn2:ioSpecification&gt;
        &lt;bpmn2:dataInput id="BusinessRuleTask_1_namespaceInputX" drools:dtype="java.lang.String" itemSubjectRef="_BusinessRuleTask_1_namespaceInputXItem" name="namespace"/&gt;
        &lt;bpmn2:dataInput id="BusinessRuleTask_1_decisionInputX" drools:dtype="java.lang.String" itemSubjectRef="_BusinessRuleTask_1_decisionInputXItem" name="decision"/&gt;
        &lt;bpmn2:dataInput id="BusinessRuleTask_1_modelInputX" drools:dtype="java.lang.String" itemSubjectRef="_BusinessRuleTask_1_modelInputXItem" name="model"/&gt;
        &lt;bpmn2:dataInput id="BusinessRuleTask_1_PersonInputX" drools:dtype="org.acme.Person" itemSubjectRef="_BusinessRuleTask_1_PersonInputXItem" name="Person"/&gt;
        &lt;bpmn2:dataOutput id="BusinessRuleTask_1_isAdultOutputX" drools:dtype="Boolean" itemSubjectRef="_BusinessRuleTask_1_isAdultOutputXItem" name="isAdult"/&gt;
        &lt;bpmn2:inputSet&gt;
          &lt;bpmn2:dataInputRefs&gt;BusinessRuleTask_1_namespaceInputX&lt;/bpmn2:dataInputRefs&gt;
          &lt;bpmn2:dataInputRefs&gt;BusinessRuleTask_1_decisionInputX&lt;/bpmn2:dataInputRefs&gt;
          &lt;bpmn2:dataInputRefs&gt;BusinessRuleTask_1_modelInputX&lt;/bpmn2:dataInputRefs&gt;
          &lt;bpmn2:dataInputRefs&gt;BusinessRuleTask_1_PersonInputX&lt;/bpmn2:dataInputRefs&gt;
        &lt;/bpmn2:inputSet&gt;
        &lt;bpmn2:outputSet&gt;
          &lt;bpmn2:dataOutputRefs&gt;BusinessRuleTask_1_isAdultOutputX&lt;/bpmn2:dataOutputRefs&gt;
        &lt;/bpmn2:outputSet&gt;
      &lt;/bpmn2:ioSpecification&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:targetRef&gt;BusinessRuleTask_1_namespaceInputX&lt;/bpmn2:targetRef&gt;
        &lt;bpmn2:assignment&gt;
          &lt;bpmn2:from xsi:type="bpmn2:tFormalExpression"&gt;https://kiegroup.org/dmn/_52CEF9FD-9943-4A89-96D5-6F66810CA4C1&lt;/bpmn2:from&gt;
          &lt;bpmn2:to xsi:type="bpmn2:tFormalExpression"&gt;BusinessRuleTask_1_namespaceInputX&lt;/bpmn2:to&gt;
        &lt;/bpmn2:assignment&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:targetRef&gt;BusinessRuleTask_1_decisionInputX&lt;/bpmn2:targetRef&gt;
        &lt;bpmn2:assignment&gt;
          &lt;bpmn2:from xsi:type="bpmn2:tFormalExpression"&gt;isAdult&lt;/bpmn2:from&gt;
          &lt;bpmn2:to xsi:type="bpmn2:tFormalExpression"&gt;BusinessRuleTask_1_decisionInputX&lt;/bpmn2:to&gt;
        &lt;/bpmn2:assignment&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:targetRef&gt;BusinessRuleTask_1_modelInputX&lt;/bpmn2:targetRef&gt;
        &lt;bpmn2:assignment&gt;
          &lt;bpmn2:from xsi:type="bpmn2:tFormalExpression"&gt;PersonDecisions&lt;/bpmn2:from&gt;
          &lt;bpmn2:to xsi:type="bpmn2:tFormalExpression"&gt;BusinessRuleTask_1_modelInputX&lt;/bpmn2:to&gt;
        &lt;/bpmn2:assignment&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:sourceRef&gt;person&lt;/bpmn2:sourceRef&gt;
        &lt;bpmn2:targetRef&gt;BusinessRuleTask_1_PersonInputX&lt;/bpmn2:targetRef&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
      &lt;bpmn2:dataOutputAssociation&gt;
        &lt;bpmn2:sourceRef&gt;BusinessRuleTask_1_isAdultOutputX&lt;/bpmn2:sourceRef&gt;
        &lt;bpmn2:targetRef&gt;isAdult&lt;/bpmn2:targetRef&gt;
      &lt;/bpmn2:dataOutputAssociation&gt;
    &lt;/bpmn2:businessRuleTask&gt;
    &lt;bpmn2:exclusiveGateway id="ExclusiveGateway_1" name="Exclusive Gateway 1" gatewayDirection="Diverging"&gt;
      &lt;bpmn2:extensionElements&gt;
        &lt;drools:metaData name="elementname"&gt;
          &lt;drools:metaValue&gt;Exclusive Gateway 1&lt;/drools:metaValue&gt;
        &lt;/drools:metaData&gt;
      &lt;/bpmn2:extensionElements&gt;
      &lt;bpmn2:incoming&gt;SequenceFlow_2&lt;/bpmn2:incoming&gt;
      &lt;bpmn2:outgoing&gt;SequenceFlow_5&lt;/bpmn2:outgoing&gt;
      &lt;bpmn2:outgoing&gt;SequenceFlow_3&lt;/bpmn2:outgoing&gt;
    &lt;/bpmn2:exclusiveGateway&gt;
    &lt;bpmn2:userTask id="UserTask_1" name="Special handling for children"&gt;
      &lt;bpmn2:extensionElements&gt;
        &lt;drools:metaData name="elementname"&gt;
          &lt;drools:metaValue&gt;Special handling for children&lt;/drools:metaValue&gt;
        &lt;/drools:metaData&gt;
      &lt;/bpmn2:extensionElements&gt;
      &lt;bpmn2:incoming&gt;SequenceFlow_3&lt;/bpmn2:incoming&gt;
      &lt;bpmn2:outgoing&gt;SequenceFlow_4&lt;/bpmn2:outgoing&gt;
      &lt;bpmn2:ioSpecification&gt;
        &lt;bpmn2:dataInput id="UserTask_1_TaskNameInputX" drools:dtype="Object" itemSubjectRef="_UserTask_1_TaskNameInputXItem" name="TaskName"/&gt;
        &lt;bpmn2:dataInput id="UserTask_1_personInputX" drools:dtype="org.acme.Person" itemSubjectRef="_UserTask_1_personInputXItem" name="person"/&gt;
        &lt;bpmn2:dataInput id="UserTask_1_SkippableInputX" drools:dtype="Object" itemSubjectRef="_UserTask_1_SkippableInputXItem" name="Skippable"/&gt;
        &lt;bpmn2:dataInput id="UserTask_1_PriorityInputX" drools:dtype="Object" itemSubjectRef="_UserTask_1_PriorityInputXItem" name="Priority"/&gt;
        &lt;bpmn2:inputSet&gt;
          &lt;bpmn2:dataInputRefs&gt;UserTask_1_TaskNameInputX&lt;/bpmn2:dataInputRefs&gt;
          &lt;bpmn2:dataInputRefs&gt;UserTask_1_personInputX&lt;/bpmn2:dataInputRefs&gt;
          &lt;bpmn2:dataInputRefs&gt;UserTask_1_SkippableInputX&lt;/bpmn2:dataInputRefs&gt;
          &lt;bpmn2:dataInputRefs&gt;UserTask_1_PriorityInputX&lt;/bpmn2:dataInputRefs&gt;
        &lt;/bpmn2:inputSet&gt;
      &lt;/bpmn2:ioSpecification&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:targetRef&gt;UserTask_1_TaskNameInputX&lt;/bpmn2:targetRef&gt;
        &lt;bpmn2:assignment&gt;
          &lt;bpmn2:from xsi:type="bpmn2:tFormalExpression"&gt;ChildrenHandling&lt;/bpmn2:from&gt;
          &lt;bpmn2:to xsi:type="bpmn2:tFormalExpression"&gt;UserTask_1_TaskNameInputX&lt;/bpmn2:to&gt;
        &lt;/bpmn2:assignment&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:sourceRef&gt;person&lt;/bpmn2:sourceRef&gt;
        &lt;bpmn2:targetRef&gt;UserTask_1_personInputX&lt;/bpmn2:targetRef&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:targetRef&gt;UserTask_1_SkippableInputX&lt;/bpmn2:targetRef&gt;
        &lt;bpmn2:assignment&gt;
          &lt;bpmn2:from xsi:type="bpmn2:tFormalExpression"&gt;true&lt;/bpmn2:from&gt;
          &lt;bpmn2:to xsi:type="bpmn2:tFormalExpression"&gt;UserTask_1_SkippableInputX&lt;/bpmn2:to&gt;
        &lt;/bpmn2:assignment&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
      &lt;bpmn2:dataInputAssociation&gt;
        &lt;bpmn2:targetRef&gt;UserTask_1_PriorityInputX&lt;/bpmn2:targetRef&gt;
        &lt;bpmn2:assignment&gt;
          &lt;bpmn2:from xsi:type="bpmn2:tFormalExpression"&gt;1&lt;/bpmn2:from&gt;
          &lt;bpmn2:to xsi:type="bpmn2:tFormalExpression"&gt;UserTask_1_PriorityInputX&lt;/bpmn2:to&gt;
        &lt;/bpmn2:assignment&gt;
      &lt;/bpmn2:dataInputAssociation&gt;
    &lt;/bpmn2:userTask&gt;
    &lt;bpmn2:endEvent id="EndEvent_1" name="End Event 1"&gt;
      &lt;bpmn2:extensionElements&gt;
        &lt;drools:metaData name="elementname"&gt;
          &lt;drools:metaValue&gt;End Event 1&lt;/drools:metaValue&gt;
        &lt;/drools:metaData&gt;
      &lt;/bpmn2:extensionElements&gt;
      &lt;bpmn2:incoming&gt;SequenceFlow_4&lt;/bpmn2:incoming&gt;
    &lt;/bpmn2:endEvent&gt;
    &lt;bpmn2:endEvent id="EndEvent_2" name="End Event 2"&gt;
      &lt;bpmn2:extensionElements&gt;
        &lt;drools:metaData name="elementname"&gt;
          &lt;drools:metaValue&gt;End Event 2&lt;/drools:metaValue&gt;
        &lt;/drools:metaData&gt;
      &lt;/bpmn2:extensionElements&gt;
      &lt;bpmn2:incoming&gt;SequenceFlow_5&lt;/bpmn2:incoming&gt;
    &lt;/bpmn2:endEvent&gt;
  &lt;/bpmn2:process&gt;
  &lt;bpmndi:BPMNDiagram&gt;
    &lt;bpmndi:BPMNPlane bpmnElement="persons"&gt;
      &lt;bpmndi:BPMNShape id="shape_EndEvent_2" bpmnElement="EndEvent_2"&gt;
        &lt;dc:Bounds height="56" width="56" x="622" y="201"/&gt;
      &lt;/bpmndi:BPMNShape&gt;
      &lt;bpmndi:BPMNShape id="shape_EndEvent_1" bpmnElement="EndEvent_1"&gt;
        &lt;dc:Bounds height="56" width="56" x="622" y="105"/&gt;
      &lt;/bpmndi:BPMNShape&gt;
      &lt;bpmndi:BPMNShape id="shape_UserTask_1" bpmnElement="UserTask_1"&gt;
        &lt;dc:Bounds height="78" width="134" x="449" y="94"/&gt;
      &lt;/bpmndi:BPMNShape&gt;
      &lt;bpmndi:BPMNShape id="shape_ExclusiveGateway_1" bpmnElement="ExclusiveGateway_1"&gt;
        &lt;dc:Bounds height="56" width="56" x="365" y="105"/&gt;
      &lt;/bpmndi:BPMNShape&gt;
      &lt;bpmndi:BPMNShape id="shape_BusinessRuleTask_1" bpmnElement="BusinessRuleTask_1"&gt;
        &lt;dc:Bounds height="71" width="141" x="180" y="97"/&gt;
      &lt;/bpmndi:BPMNShape&gt;
      &lt;bpmndi:BPMNShape id="shape_StartEvent_1" bpmnElement="StartEvent_1"&gt;
        &lt;dc:Bounds height="56" width="56" x="80" y="105"/&gt;
      &lt;/bpmndi:BPMNShape&gt;
      &lt;bpmndi:BPMNEdge id="edge_shape_ExclusiveGateway_1_to_shape_EndEvent_2" bpmnElement="SequenceFlow_5"&gt;
        &lt;di:waypoint x="390" y="155"/&gt;
        &lt;di:waypoint x="393" y="231"/&gt;
        &lt;di:waypoint x="622" y="219"/&gt;
      &lt;/bpmndi:BPMNEdge&gt;
      &lt;bpmndi:BPMNEdge id="edge_shape_UserTask_1_to_shape_EndEvent_1" bpmnElement="SequenceFlow_4"&gt;
        &lt;di:waypoint x="583" y="133"/&gt;
        &lt;di:waypoint x="622" y="123"/&gt;
      &lt;/bpmndi:BPMNEdge&gt;
      &lt;bpmndi:BPMNEdge id="edge_shape_ExclusiveGateway_1_to_shape_UserTask_1" bpmnElement="SequenceFlow_3"&gt;
        &lt;di:waypoint x="415" y="130"/&gt;
        &lt;di:waypoint x="449" y="133"/&gt;
      &lt;/bpmndi:BPMNEdge&gt;
      &lt;bpmndi:BPMNEdge id="edge_shape_BusinessRuleTask_1_to_shape_ExclusiveGateway_1" bpmnElement="SequenceFlow_2"&gt;
        &lt;di:waypoint x="321" y="132.5"/&gt;
        &lt;di:waypoint x="365" y="130"/&gt;
      &lt;/bpmndi:BPMNEdge&gt;
      &lt;bpmndi:BPMNEdge id="edge_shape_StartEvent_1_to_shape_BusinessRuleTask_1" bpmnElement="SequenceFlow_1"&gt;
        &lt;di:waypoint x="116" y="123"/&gt;
        &lt;di:waypoint x="180" y="132.5"/&gt;
      &lt;/bpmndi:BPMNEdge&gt;
    &lt;/bpmndi:BPMNPlane&gt;
  &lt;/bpmndi:BPMNDiagram&gt;
  &lt;bpmn2:relationship type="BPSimData"&gt;
    &lt;bpmn2:extensionElements&gt;
      &lt;bpsim:BPSimData&gt;
        &lt;bpsim:Scenario id="default" name="Simulationscenario"&gt;
          &lt;bpsim:ScenarioParameters/&gt;
          &lt;bpsim:ElementParameters elementRef="UserTask_1"&gt;
            &lt;bpsim:TimeParameters&gt;
              &lt;bpsim:ProcessingTime&gt;
                &lt;bpsim:NormalDistribution mean="0" standardDeviation="0"/&gt;
              &lt;/bpsim:ProcessingTime&gt;
            &lt;/bpsim:TimeParameters&gt;
            &lt;bpsim:ResourceParameters&gt;
              &lt;bpsim:Availability&gt;
                &lt;bpsim:FloatingParameter value="0"/&gt;
              &lt;/bpsim:Availability&gt;
              &lt;bpsim:Quantity&gt;
                &lt;bpsim:FloatingParameter value="0"/&gt;
              &lt;/bpsim:Quantity&gt;
            &lt;/bpsim:ResourceParameters&gt;
            &lt;bpsim:CostParameters&gt;
              &lt;bpsim:UnitCost&gt;
                &lt;bpsim:FloatingParameter value="0"/&gt;
              &lt;/bpsim:UnitCost&gt;
            &lt;/bpsim:CostParameters&gt;
          &lt;/bpsim:ElementParameters&gt;
          &lt;bpsim:ElementParameters elementRef="BusinessRuleTask_1"&gt;
            &lt;bpsim:TimeParameters&gt;
              &lt;bpsim:ProcessingTime&gt;
                &lt;bpsim:NormalDistribution mean="0" standardDeviation="0"/&gt;
              &lt;/bpsim:ProcessingTime&gt;
            &lt;/bpsim:TimeParameters&gt;
            &lt;bpsim:ResourceParameters&gt;
              &lt;bpsim:Availability&gt;
                &lt;bpsim:FloatingParameter value="0"/&gt;
              &lt;/bpsim:Availability&gt;
              &lt;bpsim:Quantity&gt;
                &lt;bpsim:FloatingParameter value="0"/&gt;
              &lt;/bpsim:Quantity&gt;
            &lt;/bpsim:ResourceParameters&gt;
            &lt;bpsim:CostParameters&gt;
              &lt;bpsim:UnitCost&gt;
                &lt;bpsim:FloatingParameter value="0"/&gt;
              &lt;/bpsim:UnitCost&gt;
            &lt;/bpsim:CostParameters&gt;
          &lt;/bpsim:ElementParameters&gt;
          &lt;bpsim:ElementParameters elementRef="StartEvent_1"&gt;
            &lt;bpsim:TimeParameters&gt;
              &lt;bpsim:ProcessingTime&gt;
                &lt;bpsim:NormalDistribution mean="0" standardDeviation="0"/&gt;
              &lt;/bpsim:ProcessingTime&gt;
            &lt;/bpsim:TimeParameters&gt;
          &lt;/bpsim:ElementParameters&gt;
        &lt;/bpsim:Scenario&gt;
      &lt;/bpsim:BPSimData&gt;
    &lt;/bpmn2:extensionElements&gt;
    &lt;bpmn2:source&gt;_J4ElsVJgEDiScotxwBQ14Q&lt;/bpmn2:source&gt;
    &lt;bpmn2:target&gt;_J4ElsVJgEDiScotxwBQ14Q&lt;/bpmn2:target&gt;
  &lt;/bpmn2:relationship&gt;
&lt;/bpmn2:definitions&gt;
</codeblock>
                  <p>To create this example BPMN process in VSCode using the IBM BAMOE BPMN modeler, follow these steps:</p>
                  <ol>
                     <li>
                        <p>Open the empty <tt>PersonProcess.bpmn2</tt> file and in the upper-right corner of the BPMN modeler, click the <b>Properties</b> icon and define the following properties:</p>
                        <ul>
                           <li>
                              <p>
                                 <b>Process</b>: Set the following values:</p>
                              <ul>
                                 <li>
                                    <b>Name</b>: <tt>Person Process</tt>
                                 </li>
                                 <li>
                                    <b>ID</b>: <tt>persons</tt>
                                 </li>
                                 <li>
                                    <b>Package</b>: <tt>org.acme</tt>
                                 </li>
                              </ul>
                           </li>
                           <li>
                              <p>
                                 <b>Process Data</b>: Add the following process variables:</p>
                              <ul>
                                 <li>
                                    <tt>person</tt> with the type <tt>org.acme.Person</tt> (Use the <b>Custom</b> data type option to define the custom type.)</li>
                                 <li>
                                    <tt>isAdult</tt> with the type <tt>Boolean</tt>
                                 </li>
                              </ul>
                           </li>
                        </ul>
                     </li>
                     <li>In the left palette, select <b>Activities</b> â†’ <b>Business Rule</b>, drag the task to the canvas, and link to it from the start event.</li>
                     <li>
                        <p>Select the business rule task and define the following properties:</p>
                        <ul>
                           <li>
                              <b>General</b>: Set the rule task <b>Name</b> to <tt>Evaluate person</tt>.</li>
                           <li>
                              <p>
                                 <b>Implementation/Execution</b>: Set the following values:</p>
                              <ul>
                                 <li>
                                    <b>Rule Language</b>: <tt>DMN</tt>
                                 </li>
                                 <li>
                                    <b>Namespace</b>: The <tt>namespace</tt> property value from the <tt>PersonDecisions.dmn</tt> file that you created previously, such as <tt>https://kiegroup.org/dmn/_52CEF9FD-9943-4A89-96D5-6F66810CA4C1</tt>
                                 </li>
                                 <li>
                                    <b>DMN Model Name</b>: <tt>PersonDecisions</tt>
                                 </li>
                              </ul>
                           </li>
                           <li>
                              <p>
                                 <b>Data Assignments</b>: Add the following assignments:</p>
                              <ul>
                                 <li>
                                    <b>Data Input</b>: Add a data input with the name <tt>Person</tt>, with the type <tt>org.acme.Person</tt>, and with the source <tt>person</tt>.</li>
                                 <li>
                                    <b>Data Output</b>: Add a data output with the name <tt>isAdult</tt>, with the type <tt>Boolean</tt>, and with the source <tt>isAdult</tt>.</li>
                              </ul>
                           </li>
                        </ul>
                     </li>
                     <li>In the left palette, select <b>Gateways</b> â†’ <b>Exclusive</b>, drag the gateway to the canvas, and link to it from the rule task.</li>
                     <li>In the left palette, select <b>Activities</b> â†’ <b>User</b>, drag the user task to the canvas, and link to it from the exclusive gateway.</li>
                     <li>
                        <p>Select the user task and define the following properties:</p>
                        <ul>
                           <li>
                              <b>General</b>: Set the user task <b>Name</b> to <tt>Special handling for children</tt>.</li>
                           <li>
                              <b>Implementation/Execution</b>: Set the <b>Task Name</b> to <tt>ChildrenHandling</tt>, and add a data input with the name <tt>person</tt>, the type <tt>org.acme.Person</tt>, and the source <tt>person</tt>.</li>
                        </ul>
                     </li>
                     <li>In the left palette, select <b>End Events</b> â†’ <b>End</b>, drag two end events to the canvas, and link to one end event from the user task and to the other end event from the exclusive gateway.</li>
                     <li>Select the connector that connects the exclusive gateway to the end event and for the <b>Implementation/Execution</b> property, set the <b>Condition Expression</b> to <tt>Java</tt> and enter the condition <tt>return isAdult == true;</tt>.</li>
                     <li>Select the connector that connects the exclusive gateway to the user task and for the <b>Implementation/Execution</b> property, set the <b>Condition Expression</b> to <tt>Java</tt> and enter the condition to <tt>return isAdult == false;</tt>.</li>
                     <li>Save the BPMN process file.</li>
                  </ol>
               </div>
            </li>
         </ol>
         <div conref="building-decision-servicesproc-kogito-designing-app-rule-units.dita">proc-kogito-designing-app-rule-units</div>
      </section>
      <section id="proc-kogito-testing-decision-logic">
         <p>As you develop business decisions in your IBM BAMOE services, you can use test scenarios to validate the functionality of your decisions before you begin running and using your IBM BAMOE services. With a test scenario, you use data from your project to set given conditions and expected results based on one or more defined business decisions. When you run the scenario, the expected results and actual results of the decision instance are compared. If the expected results match the actual results, the test is successful. If the expected results do not match the actual results, then the test fails.</p>
         <p>You define test scenarios in <tt>.scesim</tt> (scenario simulation) files that you can model in Visual Studio Code (VSCode) using the <xref href="https://marketplace.visualstudio.com/items?itemName=IBM.bamoe-developer-tools" scope="external">
               <b>IBM BAMOE Developer Tools for VS Code</b>
            </xref>. You can use one or multiple <tt>.scesim</tt> files in your IBM BAMOE project, and each <tt>.scesim</tt> file can contain one or multiple test scenarios based on the defined decision data.</p>
         <p>The example for this procedure uses a basic <tt>PersonDecisionsTest.scesim</tt> test scenario file that validates the decision logic in the example <tt>PersonDecisions.dmn</tt> Decision Model and Notation (DMN) model that you created previously.</p>
         <note type="important">
Test scenarios in IBM BAMOE currently support DMN decision services only. Test scenarios will support Drools Rule Language (DRL) decision services in a future release.
</note>
         <p outputclass="title">
            <b>Prerequisites</b>
         </p>
         <ul>
            <li>You have created the <tt>PersonDecisions.dmn</tt> DMN model that determines whether a specified person is an adult or is underage.</li>
         </ul>
         <p outputclass="title">
            <b>Procedure</b>
         </p>
         <ol>
            <li>
               <p>In the Maven project that contains your IBM BAMOE decision services, add the following dependency to the <tt>pom.xml</tt> file to enable test scenario execution for your project:</p>
               <p outputclass="title">
                  <b>Dependency to enable test scenario execution</b>
               </p>
               <codeblock outputclass="language-xml">
&lt;dependency&gt;
  &lt;groupId&gt;org.kie.kogito&lt;/groupId&gt;
  &lt;artifactId&gt;kogito-scenario-simulation&lt;/artifactId&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</codeblock>
            </li>
            <li>
               <p>Navigate to the <tt>src/main</tt> folder of the project and create a <tt>test</tt> folder with the following subfolders. If you have an existing <tt>test</tt> folder structure, you can adapt the steps that follow according to your project layout.</p>
               <p outputclass="title">
                  <b>Test folder structure for test scenarios</b>
               </p>
               <codeblock>
src/main/test/
          â””â”€â”€ java/testscenario
          â””â”€â”€ resources
</codeblock>
            </li>
            <li>
               <p>Navigate to the <tt>test/java/testscenario</tt> folder and add the following <tt>KogitoScenarioJunitActivatorTest.java</tt> class:</p>
               <div>
                  <p outputclass="title">
                     <b>Activator class for test scenarios</b>
                  </p>
                  <codeblock outputclass="language-java">
package testscenario;

@org.junit.runner.RunWith(org.kogito.scenariosimulation.runner.KogitoJunitActivator.class)
public class KogitoScenarioJunitActivatorTest {

}
</codeblock>
                  <p>This activator class is a custom <xref href="https://junit.org/junit5/" scope="external">JUnit 5</xref> runner that enables the execution of test scenario files in your IBM BAMOE project. When you run test scenarios, this class loads all <tt>.scesim</tt> files available in the project and executes them. For each row (scenario) in a test scenario file, the activator class generates a JUnit test result.</p>
               </div>
            </li>
            <li>
               <p>Navigate to the <tt>test/resources</tt> folder and add the following <tt>PersonDecisionsTest.scesim</tt> test scenario file:</p>
               <div>
                  <fig>
                     <title>Example test scenarios for <tt>PersonDecisions</tt> DMN decision logic</title>
                     <image href="../images/kogito-test-scenario-example-person.png" placement="break">
                        <alt>Image of PersonDecisionsTest test scenario</alt>
                     </image>
                  </fig>
                  <p>The <b>GIVEN</b> columns specify input conditions based on the corresponding decision service. The <b>EXPECT</b> column specifies the expected results of the decision service based on the defined <b>GIVEN</b> conditions. Each row in the table is a defined scenario with example values for the <b>GIVEN</b> and <b>EXPECT</b> definitions to test the decision logic of the corresponding decision service.</p>
                  <p>This example test scenario file tests the decision logic for the following <tt>PersonDecisions.dmn</tt> model that you created previously. This DMN model determines whether a specified person is an adult or is underage.</p>
                  <fig>
                     <title>Example <tt>PersonDecisions</tt> DMN decision requirements diagram (DRD)</title>
                     <image href="../images/kogito-dmn-example-person.png" placement="break">
                        <alt>Image of PersonDecisions decision diagram</alt>
                     </image>
                  </fig>
                  <fig>
                     <title>Example DMN boxed expression for <tt>isAdult</tt> decision</title>
                     <image href="../images/kogito-dmn-example-person-logic.png" placement="break">
                        <alt>Image of PersonDecisions decision table</alt>
                     </image>
                  </fig>
                  <p>In VSCode (recommended), you can add the <xref href="https://marketplace.visualstudio.com/items?itemName=IBM.bamoe-developer-tools" scope="external">
                        <b>IBM BAMOE Developer Tools for VS Code</b>
                     </xref> to design the test scenarios with the test scenario modeler.</p>
                  <p>To create these example test scenarios quickly, you can copy the following <tt>PersonDecisionsTest.scesim</tt> file content:</p>
                  <p outputclass="title">
                     <b>Example test scenario file</b>
                  </p>
                  <codeblock outputclass="language-xml">
&lt;ScenarioSimulationModel version="1.8"&gt;
  &lt;simulation&gt;
    &lt;scesimModelDescriptor&gt;
      &lt;factMappings&gt;
        &lt;FactMapping&gt;
          &lt;expressionElements/&gt;
          &lt;expressionIdentifier&gt;
            &lt;name&gt;Index&lt;/name&gt;
            &lt;type&gt;OTHER&lt;/type&gt;
          &lt;/expressionIdentifier&gt;
          &lt;factIdentifier&gt;
            &lt;name&gt;#&lt;/name&gt;
            &lt;className&gt;java.lang.Integer&lt;/className&gt;
          &lt;/factIdentifier&gt;
          &lt;className&gt;java.lang.Integer&lt;/className&gt;
          &lt;factAlias&gt;#&lt;/factAlias&gt;
          &lt;columnWidth&gt;70&lt;/columnWidth&gt;
          &lt;factMappingValueType&gt;NOT_EXPRESSION&lt;/factMappingValueType&gt;
        &lt;/FactMapping&gt;
        &lt;FactMapping&gt;
          &lt;expressionElements/&gt;
          &lt;expressionIdentifier&gt;
            &lt;name&gt;Description&lt;/name&gt;
            &lt;type&gt;OTHER&lt;/type&gt;
          &lt;/expressionIdentifier&gt;
          &lt;factIdentifier&gt;
            &lt;name&gt;Scenario description&lt;/name&gt;
            &lt;className&gt;java.lang.String&lt;/className&gt;
          &lt;/factIdentifier&gt;
          &lt;className&gt;java.lang.String&lt;/className&gt;
          &lt;factAlias&gt;Scenario description&lt;/factAlias&gt;
          &lt;columnWidth&gt;300&lt;/columnWidth&gt;
          &lt;factMappingValueType&gt;NOT_EXPRESSION&lt;/factMappingValueType&gt;
        &lt;/FactMapping&gt;
        &lt;FactMapping&gt;
          &lt;expressionElements&gt;
            &lt;ExpressionElement&gt;
              &lt;step&gt;Person&lt;/step&gt;
            &lt;/ExpressionElement&gt;
            &lt;ExpressionElement&gt;
              &lt;step&gt;Age&lt;/step&gt;
            &lt;/ExpressionElement&gt;
          &lt;/expressionElements&gt;
          &lt;expressionIdentifier&gt;
            &lt;name&gt;1|1&lt;/name&gt;
            &lt;type&gt;GIVEN&lt;/type&gt;
          &lt;/expressionIdentifier&gt;
          &lt;factIdentifier&gt;
            &lt;name&gt;Person&lt;/name&gt;
            &lt;className&gt;Person&lt;/className&gt;
          &lt;/factIdentifier&gt;
          &lt;className&gt;number&lt;/className&gt;
          &lt;factAlias&gt;Person&lt;/factAlias&gt;
          &lt;expressionAlias&gt;Age&lt;/expressionAlias&gt;
          &lt;genericTypes/&gt;
          &lt;columnWidth&gt;114&lt;/columnWidth&gt;
          &lt;factMappingValueType&gt;NOT_EXPRESSION&lt;/factMappingValueType&gt;
        &lt;/FactMapping&gt;
        &lt;FactMapping&gt;
          &lt;expressionElements&gt;
            &lt;ExpressionElement&gt;
              &lt;step&gt;Person&lt;/step&gt;
            &lt;/ExpressionElement&gt;
            &lt;ExpressionElement&gt;
              &lt;step&gt;Name&lt;/step&gt;
            &lt;/ExpressionElement&gt;
          &lt;/expressionElements&gt;
          &lt;expressionIdentifier&gt;
            &lt;name&gt;1|2&lt;/name&gt;
            &lt;type&gt;GIVEN&lt;/type&gt;
          &lt;/expressionIdentifier&gt;
          &lt;factIdentifier&gt;
            &lt;name&gt;Person&lt;/name&gt;
            &lt;className&gt;Person&lt;/className&gt;
          &lt;/factIdentifier&gt;
          &lt;className&gt;string&lt;/className&gt;
          &lt;factAlias&gt;Person&lt;/factAlias&gt;
          &lt;expressionAlias&gt;Name&lt;/expressionAlias&gt;
          &lt;genericTypes/&gt;
          &lt;columnWidth&gt;114&lt;/columnWidth&gt;
          &lt;factMappingValueType&gt;NOT_EXPRESSION&lt;/factMappingValueType&gt;
        &lt;/FactMapping&gt;
        &lt;FactMapping&gt;
          &lt;expressionElements&gt;
            &lt;ExpressionElement&gt;
              &lt;step&gt;isAdult&lt;/step&gt;
            &lt;/ExpressionElement&gt;
          &lt;/expressionElements&gt;
          &lt;expressionIdentifier&gt;
            &lt;name&gt;1|4&lt;/name&gt;
            &lt;type&gt;EXPECT&lt;/type&gt;
          &lt;/expressionIdentifier&gt;
          &lt;factIdentifier&gt;
            &lt;name&gt;isAdult&lt;/name&gt;
            &lt;className&gt;isAdult&lt;/className&gt;
          &lt;/factIdentifier&gt;
          &lt;className&gt;boolean&lt;/className&gt;
          &lt;factAlias&gt;isAdult&lt;/factAlias&gt;
          &lt;expressionAlias&gt;value&lt;/expressionAlias&gt;
          &lt;genericTypes/&gt;
          &lt;columnWidth&gt;114&lt;/columnWidth&gt;
          &lt;factMappingValueType&gt;NOT_EXPRESSION&lt;/factMappingValueType&gt;
        &lt;/FactMapping&gt;
      &lt;/factMappings&gt;
    &lt;/scesimModelDescriptor&gt;
    &lt;scesimData&gt;
      &lt;Scenario&gt;
        &lt;factMappingValues&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;Scenario description&lt;/name&gt;
              &lt;className&gt;java.lang.String&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;Description&lt;/name&gt;
              &lt;type&gt;OTHER&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;Is an adult&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;Person&lt;/name&gt;
              &lt;className&gt;Person&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;1|1&lt;/name&gt;
              &lt;type&gt;GIVEN&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;20&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;Person&lt;/name&gt;
              &lt;className&gt;Person&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;1|2&lt;/name&gt;
              &lt;type&gt;GIVEN&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;"John Quark"&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;isAdult&lt;/name&gt;
              &lt;className&gt;isAdult&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;1|4&lt;/name&gt;
              &lt;type&gt;EXPECT&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;true&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;#&lt;/name&gt;
              &lt;className&gt;java.lang.Integer&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;Index&lt;/name&gt;
              &lt;type&gt;OTHER&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;1&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
        &lt;/factMappingValues&gt;
      &lt;/Scenario&gt;
      &lt;Scenario&gt;
        &lt;factMappingValues&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;Scenario description&lt;/name&gt;
              &lt;className&gt;java.lang.String&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;Description&lt;/name&gt;
              &lt;type&gt;OTHER&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;Is underage&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;Person&lt;/name&gt;
              &lt;className&gt;Person&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;1|1&lt;/name&gt;
              &lt;type&gt;GIVEN&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;15&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;Person&lt;/name&gt;
              &lt;className&gt;Person&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;1|2&lt;/name&gt;
              &lt;type&gt;GIVEN&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;"Jenny Quark"&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;isAdult&lt;/name&gt;
              &lt;className&gt;isAdult&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;1|4&lt;/name&gt;
              &lt;type&gt;EXPECT&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;false&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;#&lt;/name&gt;
              &lt;className&gt;java.lang.Integer&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;Index&lt;/name&gt;
              &lt;type&gt;OTHER&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
            &lt;rawValue class="string"&gt;2&lt;/rawValue&gt;
          &lt;/FactMappingValue&gt;
        &lt;/factMappingValues&gt;
      &lt;/Scenario&gt;
    &lt;/scesimData&gt;
  &lt;/simulation&gt;
  &lt;background&gt;
    &lt;scesimModelDescriptor&gt;
      &lt;factMappings&gt;
        &lt;FactMapping&gt;
          &lt;expressionElements/&gt;
          &lt;expressionIdentifier&gt;
            &lt;name&gt;1|1&lt;/name&gt;
            &lt;type&gt;GIVEN&lt;/type&gt;
          &lt;/expressionIdentifier&gt;
          &lt;factIdentifier&gt;
            &lt;name&gt;Empty&lt;/name&gt;
            &lt;className&gt;java.lang.Void&lt;/className&gt;
          &lt;/factIdentifier&gt;
          &lt;className&gt;java.lang.Void&lt;/className&gt;
          &lt;factAlias&gt;INSTANCE 1&lt;/factAlias&gt;
          &lt;expressionAlias&gt;PROPERTY 1&lt;/expressionAlias&gt;
          &lt;columnWidth&gt;114&lt;/columnWidth&gt;
          &lt;factMappingValueType&gt;NOT_EXPRESSION&lt;/factMappingValueType&gt;
        &lt;/FactMapping&gt;
      &lt;/factMappings&gt;
    &lt;/scesimModelDescriptor&gt;
    &lt;scesimData&gt;
      &lt;BackgroundData&gt;
        &lt;factMappingValues&gt;
          &lt;FactMappingValue&gt;
            &lt;factIdentifier&gt;
              &lt;name&gt;Empty&lt;/name&gt;
              &lt;className&gt;java.lang.Void&lt;/className&gt;
            &lt;/factIdentifier&gt;
            &lt;expressionIdentifier&gt;
              &lt;name&gt;1|1&lt;/name&gt;
              &lt;type&gt;GIVEN&lt;/type&gt;
            &lt;/expressionIdentifier&gt;
          &lt;/FactMappingValue&gt;
        &lt;/factMappingValues&gt;
      &lt;/BackgroundData&gt;
    &lt;/scesimData&gt;
  &lt;/background&gt;
  &lt;settings&gt;
    &lt;dmnFilePath&gt;src/main/resources/PersonDecisions.dmn&lt;/dmnFilePath&gt;
    &lt;type&gt;DMN&lt;/type&gt;
    &lt;dmnNamespace&gt;https://kiegroup.org/dmn/_52CEF9FD-9943-4A89-96D5-6F66810CA4C1&lt;/dmnNamespace&gt;
    &lt;dmnName&gt;PersonDecisions&lt;/dmnName&gt;
    &lt;skipFromBuild&gt;false&lt;/skipFromBuild&gt;
    &lt;stateless&gt;false&lt;/stateless&gt;
  &lt;/settings&gt;
  &lt;imports&gt;
    &lt;imports/&gt;
  &lt;/imports&gt;
&lt;/ScenarioSimulationModel&gt;
</codeblock>
                  <p>To create this example test scenario file in VSCode using the IBM BAMOE test scenario modeler, follow these steps:</p>
                  <ol>
                     <li>
                        <p>Open the empty <tt>PersonDecisionsTest.scesim</tt> file and in the <b>Create Test Scenario</b> window that appears, set the <b>Source type</b> to <b>DMN</b>, select the <tt>PersonDecisions.dmn</tt> DMN model from the drop-down options, and click <b>Create</b>.</p>
                        <fig>
                           <title>Create test scenario definition</title>
                           <image href="../images/kogito-test-scenario-example-person-create.png" placement="break">
                              <alt>Image of Create Test Scenario window</alt>
                           </image>
                        </fig>
                        <p>The test scenario modeler automatically generates a scenario template based on the available DMN data types and fields that you defined in the DMN model.</p>
                        <p>You can right-click the relevant header cells to insert or delete columns as needed to modify the table structure. You can also select the relevant header cells to modify or insert data objects from the <b>Test Tools</b> panel in the right toolbar.</p>
                     </li>
                     <li>
                        <p>For this example, modify the generated test scenario header cells and specified data objects as needed to create the following test scenario template. Use the <b>Test Tools</b> panel in the right toolbar to select and insert the data objects as needed. Many of the header cell values might already be defined for you.</p>
                        <ul>
                           <li>
                              <b>GIVEN</b>: Verify that the first header cell (instance) is set to the <b>Person</b> data object and that the subheader cells (properties) are set to the <b>Age</b> and <b>Name</b> data objects. Delete any other columns under <b>GIVEN</b> that were automatically generated, if applicable.</li>
                           <li>
                              <p>
                                 <b>EXPECT</b>: Verify that the first header cell (instance) is set to the <b>isAdult</b> data object and that the subheader cell (property) is set to the <b>value</b> data object. Delete any other columns under <b>EXPECT</b> that were automatically generated, if applicable.</p>
                              <fig>
                                 <title>Define test scenario header cells</title>
                                 <image href="../images/kogito-test-scenario-example-person-headers-create.png" placement="break">
                                    <alt>Image of test scenario template</alt>
                                 </image>
                              </fig>
                           </li>
                        </ul>
                     </li>
                     <li>
                        <p>In row 1, create a test scenario with the following values:</p>
                        <ul>
                           <li>
                              <b>Scenario description</b>: <tt>Is an adult</tt>
                           </li>
                           <li>
                              <p>
                                 <b>GIVEN</b>: Set the following values:</p>
                              <ul>
                                 <li>
                                    <b>Person</b> â†’ <b>Age</b>: <tt>20</tt>
                                 </li>
                                 <li>
                                    <b>Person</b> â†’ <b>Name</b>: <tt>John Quark</tt>
                                 </li>
                              </ul>
                           </li>
                           <li>
                              <p>
                                 <b>EXPECT</b>: Set the following value:</p>
                              <ul>
                                 <li>
                                    <b>isAdult</b> â†’ <b>value</b>: <tt>true</tt>
                                 </li>
                              </ul>
                           </li>
                        </ul>
                        <p>This example scenario tests whether the person John Quark with 20 years of age is correctly identified by the <tt>isAdult</tt> DMN decision as an adult (<tt>true</tt>), based on the decision logic that adults are more than 18 years old.</p>
                     </li>
                     <li>
                        <p>Right-click any cell in row 1, select <b>Insert row below</b>, and in row 2, create another test scenario with the following values:</p>
                        <ul>
                           <li>
                              <b>Scenario description</b>: <tt>Is underage</tt>
                           </li>
                           <li>
                              <p>
                                 <b>GIVEN</b>: Set the following values:</p>
                              <ul>
                                 <li>
                                    <b>Person</b> â†’ <b>Age</b>: <tt>15</tt>
                                 </li>
                                 <li>
                                    <b>Person</b> â†’ <b>Name</b>: <tt>Jenny Quark</tt>
                                 </li>
                              </ul>
                           </li>
                           <li>
                              <p>
                                 <b>EXPECT</b>: Set the following value:</p>
                              <ul>
                                 <li>
                                    <b>isAdult</b> â†’ <b>value</b>: <tt>false</tt>
                                 </li>
                              </ul>
                           </li>
                        </ul>
                        <p>This example scenario tests whether the person Jenny Quark with 15 years of age is correctly identified by the <tt>isAdult</tt> DMN decision as not an adult (<tt>false</tt>), based on the decision logic that adults are more than 18 years old.</p>
                     </li>
                     <li>Save the test scenario file.</li>
                  </ol>
               </div>
            </li>
            <li>
               <p>After you define and save the test scenarios, in a command terminal, navigate to the project that contains your IBM BAMOE decision service and test scenarios and enter the following command to run the test scenarios:</p>
               <div>
                  <p outputclass="title">
                     <b>Run the test scenarios</b>
                  </p>
                  <codeblock>
mvn clean test
</codeblock>
                  <p>A summary of the test scenario execution appears in the command terminal, and detailed reports are generated in the <tt>target/surefire-reports</tt> folder of your IBM BAMOE project.</p>
                  <p>In the following example output, the test scenarios were executed successfully and encountered no errors:</p>
                  <p outputclass="title">
                     <b>Terminal output for successful test scenarios</b>
                  </p>
                  <codeblock>
[INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ sample-kogito ---
[INFO]
[INFO] -------------------------------------------------------
[INFO] Â T E S T S
[INFO] -------------------------------------------------------
[INFO] Running testscenario.KogitoScenarioJunitActivatorTest
./target/classes/PersonDecisions.dmn
./src/main/resources/PersonDecisions.dmn
./target/classes/PersonDecisions.dmn
./src/main/resources/PersonDecisions.dmn
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.535 s - in testscenario.KogitoScenarioJunitActivatorTest
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: Â 52.884 s
[INFO] Finished at: 2020-05-05T15:19:53-04:00
[INFO] ------------------------------------------------------------------------
</codeblock>
                  <p>The expected results defined in the test scenarios matched the actual results of the <tt>isAdult</tt> DMN decision instance in the <tt>PersonDecisions.dmn</tt> file. This match of expected and actual results for the decision instance means that the decision logic functions as intended.</p>
                  <p>In the following example output, the test scenarios were executed and the <tt>Is underage</tt> scenario encountered an error:</p>
                  <p outputclass="title">
                     <b>Terminal output for a test scenario that encountered a decision error</b>
                  </p>
                  <codeblock>
[INFO] --- maven-surefire-plugin:2.22.1:test (default-test) @ sample-kogito ---
[INFO]
[INFO] -------------------------------------------------------
[INFO] Â T E S T S
[INFO] -------------------------------------------------------
[INFO] Running testscenario.KogitoScenarioJunitActivatorTest
./target/classes/PersonDecisions.dmn
./src/main/resources/PersonDecisions.dmn
./target/classes/PersonDecisions.dmn
./src/main/resources/PersonDecisions.dmn
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.534 s &lt;&lt;&lt; FAILURE! - in testscenario.KogitoScenarioJunitActivatorTest
[ERROR] #2: Is underage Â Time elapsed: 0.06 s Â &lt;&lt;&lt; ERROR!
org.drools.scenariosimulation.backend.runner.IndexedScenarioException: #2: Scenario 'Is underage' failed(/home/jsmith/sample-kogito/target/test-classes/PersonDecisionsTest.scesim)
Caused by: org.drools.scenariosimulation.backend.runner.ScenarioException: Scenario 'Is underage' failed

[INFO]
[INFO] Results:
[INFO]
[ERROR] Errors:
[ERROR] Â  KogitoScenarioJunitActivatorTest Â» IndexedScenario #2: Scenario 'Is underage' ...
[INFO]
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: Â 6.521 s
[INFO] Finished at: 2020-05-05T15:26:10-04:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.1:test (default-test) on project sample-kogito: There are test failures.
[ERROR]
[ERROR] Please refer to /home/jsmith/sample-kogito/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.
</codeblock>
                  <p>The expected results defined in the <tt>Is underage</tt> test scenario did not match the actual results of the <tt>isAdult</tt> DMN decision instance in the <tt>PersonDecisions.dmn</tt> file. This mismatch of expected and actual results for the decision instance means that either the test scenario identified a flaw in the decision logic or the test scenario is incorrectly defined. In this case, the <tt>Is underage</tt> test scenario was intentionally modified incorrectly with an age of <tt>20</tt> instead of an age of <tt>18</tt> or less. Reverting the age to <tt>15</tt> as shown in the previous example resolves the error.</p>
               </div>
            </li>
         </ol>
      </section>
      <section id="proc-kogito-running-app">
         <p>After you design the business decisions and processes for your IBM BAMOE service, you can run your Quarkus application in one of the following modes:</p>
         <ul>
            <li>
               <b>Development mode</b>: For local testing. On Quarkus, development mode also offers live reload of your processes and decisions in your running applications for advanced debugging.</li>
            <li>
               <b>JVM mode</b>: For compatibility with a Java virtual machine (JVM).</li>
            <li>
               <b>Native mode</b>: (Quarkus only, requires GraalVM or Mandrel) For direct binary execution as native code.</li>
         </ul>
         <p outputclass="title">
            <b>Procedure</b>
         </p>
         <p>In a command terminal, navigate to the project that contains your IBM BAMOE service and enter one of the following commands, depending on your preferred run mode and application environment:</p>
         <ul>
            <li>
               <p>For development mode:</p>
               <div>
                  <p outputclass="title">
                     <b>On Quarkus</b>
                  </p>
                  <codeblock>
$ mvn clean compile quarkus:dev
</codeblock>
               </div>
            </li>
            <li>
               <p>For JVM mode:</p>
               <div>
                  <p outputclass="title">
                     <b>On Quarkus</b>
                  </p>
                  <codeblock>
$ mvn clean package
$ java -jar target/quarkus-app/quarkus-run.jar
</codeblock>
               </div>
            </li>
            <li>
               <p>For native mode (requires GraalVM):</p>
               <div>
                  <p outputclass="title">
                     <b>On Quarkus only</b>
                  </p>
                  <codeblock>
$ mvn clean package -Dnative
$ ./target/sample-kogito-1.0-SNAPSHOT-runner
</codeblock>
               </div>
            </li>
         </ul>
         <note type="note">
            <p>Alternatively, you can use a container builder image. You do not need to install GraalVM because a container containing GraalVM is pulled automatically. Note that the executable targets a Linux kernel by default. For example:</p>
            <div>
               <p outputclass="title">
                  <b>On Quarkus only (GraalVM native build using container)</b>
               </p>
               <codeblock>
$ mvn clean package -Dnative -Dquarkus.native.container-build
</codeblock>
            </div>
            <p>To use Mandrel instead of GraalVM, run the following command:</p>
            <div>
               <p outputclass="title">
                  <b>On Quarkus only (Mandrel native build using container)</b>
               </p>
               <codeblock>
$ mvn clean package -Dnative -Dquarkus.native.container-build -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:21.1-java11
</codeblock>
            </div>
         </note>
         <p>For further information about building a native image, see <xref href="https://quarkus.io/guides/building-native-image#container-runtime" scope="external">Quarkus - Building a Native Executable</xref>.</p>
      </section>
      <section id="proc-kogito-interacting-app">
         <p>After your IBM BAMOE service is running, you can send REST API requests to interact with your application and execute your services according to how you set up the application.</p>
         <p>This example tests the <tt>/persons</tt> REST API endpoint that is automatically generated based on the <tt>PersonProcess.bpmn2</tt> business process, according to the decisions in the <tt>PersonDecisions.dmn</tt> file (or the rules in the <tt>PersonRules.drl</tt> file if you used a DRL rule unit).</p>
         <p>For this example, use a REST client, curl utility, or the Swagger UI configured for the application (such as http://localhost:8080/q/swagger-ui or http://localhost:8080/swagger-ui.html) to send API requests with the following components:</p>
         <ul>
            <li>
               <b>URL</b>: <tt>http://localhost:8080/persons</tt>
            </li>
            <li>
               <p>
                  <b>HTTP headers</b>: For <tt>POST</tt> requests only:</p>
               <ul>
                  <li>
                     <tt>accept</tt>: <tt>application/json</tt>
                  </li>
                  <li>
                     <tt>content-type</tt>: <tt>application/json</tt>
                  </li>
               </ul>
            </li>
            <li>
               <b>HTTP methods</b>: <tt>GET</tt>, <tt>POST</tt>, or <tt>DELETE</tt>
            </li>
         </ul>
         <p outputclass="title">
            <b>Example POST request body to add an adult (JSON)</b>
         </p>
         <codeblock outputclass="language-json">
{
  "person": {
    "name": "John Quark",
    "age": 20
  }
}
</codeblock>
         <p outputclass="title">
            <b>Example curl command to add an adult</b>
         </p>
         <codeblock>
curl -X POST http://localhost:8080/persons -H 'content-type: application/json' -H 'accept: application/json' -d '{"person": {"name":"John Quark", "age": 20}}'
</codeblock>
         <p outputclass="title">
            <b>Example response (JSON)</b>
         </p>
         <codeblock outputclass="language-json">
{
  "id": "3af806dd-8819-4734-a934-728f4c819682",
  "person": {
    "name": "John Quark",
    "age": 20,
    "adult": false
  },
  "isAdult": true
}
</codeblock>
         <fig>
            <title>Swagger UI to interact with all application endpoints (such as http://localhost:8080/q/swagger-ui or http://localhost:8080/swagger-ui.html)</title>
            <image href="../images/kogito-swagger-example.png" placement="break">
               <alt>Image of Swagger UI for example application</alt>
            </image>
         </fig>
         <p>This example procedure uses curl commands for convenience.</p>
         <p outputclass="title">
            <b>Procedure</b>
         </p>
         <p>In a command terminal window that is separate from your running application, navigate to the project that contains your IBM BAMOE service and use any of the following curl commands with JSON requests to interact with your running service:</p>
         <ul>
            <li>
               <p>Add an adult person:</p>
               <div>
                  <p outputclass="title">
                     <b>Example request</b>
                  </p>
                  <codeblock>
curl -X POST http://localhost:8080/persons -H 'content-type: application/json' -H 'accept: application/json' -d '{"person": {"name":"John Quark", "age": 20}}'
</codeblock>
                  <p outputclass="title">
                     <b>Example response</b>
                  </p>
                  <codeblock>
{"id":"3af806dd-8819-4734-a934-728f4c819682","person":{"name":"John Quark","age":20,"adult":false},"isAdult":true}
</codeblock>
               </div>
            </li>
            <li>
               <p>Add an underage person:</p>
               <div>
                  <p outputclass="title">
                     <b>Example request</b>
                  </p>
                  <codeblock>
curl -X POST http://localhost:8080/persons -H 'content-type: application/json' -H 'accept: application/json' -d '{"person": {"name":"Jenny Quark", "age": 15}}'
</codeblock>
                  <p outputclass="title">
                     <b>Example response</b>
                  </p>
                  <codeblock>
{"id":"8eef502b-012b-4628-acb7-73418a089c08","person":{"name":"Jenny Quark","age":15,"adult":false},"isAdult":false}
</codeblock>
               </div>
            </li>
            <li>
               <p>View active process instances:</p>
               <div>
                  <p outputclass="title">
                     <b>Example request</b>
                  </p>
                  <codeblock>
curl -X GET http://localhost:8080/persons -H 'content-type: application/json' -H 'accept: application/json'
</codeblock>
                  <p outputclass="title">
                     <b>Example response</b>
                  </p>
                  <codeblock>
[{"id":"8eef502b-012b-4628-acb7-73418a089c08","person":{"name":"Jenny Quark","age":15,"adult":false},"isAdult":false}]
</codeblock>
               </div>
            </li>
            <li>
               <p>View process instance details using the returned process UUID:</p>
               <div>
                  <p outputclass="title">
                     <b>Example request</b>
                  </p>
                  <codeblock>
curl -X GET http://localhost:8080/persons/8eef502b-012b-4628-acb7-73418a089c08/tasks -H 'content-type: application/json' -H 'accept: application/json'
</codeblock>
                  <p outputclass="title">
                     <b>Example response (JSON)</b>
                  </p>
                  <codeblock>
{"cdec4241-d676-47de-8c55-4ee4f9598bac":"ChildrenHandling"}
</codeblock>
               </div>
            </li>
            <li>
               <p>View task instance details using the returned process and task UUIDs:</p>
               <div>
                  <p outputclass="title">
                     <b>Example request</b>
                  </p>
                  <codeblock>
curl -X GET http://localhost:8080/persons/8eef502b-012b-4628-acb7-73418a089c08/ChildrenHandling/cdec4241-d676-47de-8c55-4ee4f9598bac -H 'content-type: application/json' -H 'accept: application/json'
</codeblock>
                  <p outputclass="title">
                     <b>Example response</b>
                  </p>
                  <codeblock>
{"person":{"name":"Jenny Quark","age":15,"adult":false},"name":"ChildrenHandling","id":"cdec4241-d676-47de-8c55-4ee4f9598bac"}
</codeblock>
               </div>
            </li>
            <li>
               <p>Complete the evaluation using the returned UUIDs:</p>
               <div>
                  <p outputclass="title">
                     <b>Example request</b>
                  </p>
                  <codeblock>
curl -X POST http://localhost:8080/persons/8eef502b-012b-4628-acb7-73418a089c08/ChildrenHandling/cdec4241-d676-47de-8c55-4ee4f9598bac -H 'content-type: application/json' -H 'accept: application/json' -d '{}'
</codeblock>
               </div>
            </li>
         </ul>
      </section>
      <section id="ref-kogito-glossary">
         <p>This glossary defines terms, concepts, or components that are referenced frequently in IBM BAMOE documentation or that have a unique meaning or function in IBM BAMOE.</p>
         <dl>
            <dlentry>
               <dt>BPMN model</dt>
               <dd>A definition of a business process workflow based on the <xref href="https://www.omg.org/spec/BPMN/2.0/About-BPMN" scope="external">Business Process Model and Notation (BPMN) specification</xref>. BPMN is a standard established by the Object Management Group (OMG) for describing and modeling business processes. BPMN defines an XML schema that enables BPMN models to be shared between BPMN-compliant platforms and across organizations so that business analysts and business process developers can collaborate in designing and implementing BPMN process services. The BPMN standard is similar to and can be used together with the Decision Model and Notation (DMN) standard for designing and modeling business decisions.</dd>
            </dlentry>
            <dlentry>
               <dt>business domain API</dt>
               <dd>An API that your business develops and implements within business applications that contain IBM BAMOE services.</dd>
            </dlentry>
            <dlentry>
               <dt>business models</dt>
               <dd>The collection of BPMN process models, DMN decision models, DRL rules, XLS decision tables, and any other assets that define the business logic for a IBM BAMOE service.</dd>
            </dlentry>
            <dlentry>
               <dt>CloudEvents format</dt>
               <dd>A specification for describing event data in a common way. IBM BAMOE runtime events for messages, processes, tasks, and other application activities are published in <xref href="https://cloudevents.io/" scope="external">CloudEvents</xref> format so that they can be consumed efficiently by other entities.</dd>
            </dlentry>
            <dlentry>
               <dt>decision table</dt>
               <dd>A set of business rules defined in a tabular format. Each row in a decision table is a rule, and each column is a condition, an action, or another rule attribute.</dd>
            </dlentry>
            <dlentry>
               <dt>development mode</dt>
               <dd>A project build option that provides a fast feedback loop from code changes to a running system using hot reload. Development mode also enables debugging tools such as Swagger in IBM BAMOE runtime services.</dd>
            </dlentry>
            <dlentry>
               <dt>DRL rule</dt>
               <dd>A definition of a business rule in Drools Rule Language (DRL) format. DRL is a notation established by the <xref href="https://www.drools.org/" scope="external">Drools</xref> open source business automation project for defining and describing business rules.</dd>
            </dlentry>
            <dlentry>
               <dt>DRL rule unit</dt>
               <dd>A module for rules and a unit of execution. A rule unit collects a set of rules with the declaration of the type of facts that the rules act on. A rule unit also serves as a unique namespace for each group of rules. A single rule base can contain multiple rule units. You typically store all the rules for a unit in the same file as the unit declaration so that the unit is self-contained.</dd>
            </dlentry>
            <dlentry>
               <dt>DMN model</dt>
               <dd>A definition of a business decision flow based on the <xref href="https://www.omg.org/spec/DMN" scope="external">Decision Model and Notation (DMN) specification</xref>. DMN is a standard established by the Object Management Group (OMG) for describing and modeling operational decisions. DMN defines an XML schema that enables DMN models to be shared between DMN-compliant platforms and across organizations so that business analysts and business rules developers can collaborate in designing and implementing DMN decision services. The DMN standard is similar to and can be used together with the Business Process Model and Notation (BPMN) standard for designing and modeling business processes.</dd>
            </dlentry>
            <dlentry>
               <dt>event listener</dt>
               <dd>A procedure or function in a program that reacts to a specified event, such as a completed node in a process or an executed decision.</dd>
            </dlentry>
            <dlentry>
               <dt>intelligent application</dt>
               <dd>An optimized, integrated solution that uses IBM BAMOE services to implement business-domain knowledge.</dd>
            </dlentry>
         </dl>
         <dl>
            <dlentry>
               <dt>IBM BAMOE domain-specific service</dt>
               <dd>A business automation service for your business domain that you create using IBM BAMOE. You define the logic of this service using BPMN process models, DMN decision models, or other business models, and any other supported runtime configurations. In IBM BAMOE documentation, the general term for <i>IBM BAMOE services</i> that you create refers to this type of service.</dd>
            </dlentry>
         </dl>
         <dl>
            <dlentry>
               <dt>IBM BAMOE runtime event</dt>
               <dd>A record of a significant change of state in the application domain at a point in time. IBM BAMOE emits runtime events as a result of successfully executed requests, or <i>units of work</i>, in a process instance or task instance in a process. IBM BAMOE can use these events to notify third parties about changes to the BPMN process instance and its data.</dd>
            </dlentry>
         </dl>
         <dl>
            <dlentry>
               <dt>message event</dt>
               <dd>A specified point in a business process where a defined message is used as the input (received) or output (sent) as a result of the process execution. For example, a message event might be an email sent to a specified user after a task is complete.</dd>
            </dlentry>
            <dlentry>
               <dt>MicroProfile Reactive Messaging</dt>
               <dd>A specification for sending and receiving messages within and between microservices using message brokers. IBM BAMOE supports <xref href="https://github.com/eclipse/microprofile-reactive-messaging" scope="external">MicroProfile Reactive Messaging</xref> for messaging in IBM BAMOE services, such as message events used as either input or output of business process execution.</dd>
            </dlentry>
            <dlentry>
               <dt>middleware infrastructure services</dt>
               <dd>The collection of supplemental services in IBM BAMOE that provide capabilities such as persistence, messaging, and security. Key middleware infrastructure services in IBM BAMOE include Infinispan persistence and Apache Kafka reactive messaging.</dd>
            </dlentry>
            <dlentry>
               <dt>process definition</dt>
               <dd>A model that defines the components, workflow, and functionality for a business process, such as a BPMN model.</dd>
            </dlentry>
            <dlentry>
               <dt>process instance</dt>
               <dd>An occurrence of a pending, running, or completed business process, based on the process definition.</dd>
            </dlentry>
            <dlentry>
               <dt>PROTO file (<tt>.proto</tt>)</dt>
               <dd>A data library used for marshalling Java objects in protobuf (<xref href="https://developers.google.com/protocol-buffers/" scope="external">protocol buffers</xref>) format. IBM BAMOE runtime persistence and communication with Infinispan or MongoDB are handled through a protobuf schema and generated marshallers.</dd>
            </dlentry>
         </dl>
         <dl>
            <dlentry>
               <dt>unit of work</dt>
               <dd>A component in IBM BAMOE that serves as the basis for IBM BAMOE runtime execution. Units of work capture all steps in a process and are used internally to move a process instance from one state to the next state. After all possible steps in a process are successfully executed, the final state is sent to the IBM BAMOE runtime as a runtime event. IBM BAMOE can then use these events to notify third parties about changes to the BPMN process instance and its data.</dd>
            </dlentry>
         </dl>
      </section>
   </body>
</topic>