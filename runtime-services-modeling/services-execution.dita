<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
 PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="services-execution">
   <title>Service execution</title>
   <body>
      <p>After you design your IBM BAMOE service, you can build and run your application, sending REST API requests to the application to execute your services. The exact REST API requests that you can use depend on how you set up the application.</p>
      <p>For example, consider a IBM BAMOE service that is set up to generate a <tt>/persons</tt> REST API endpoint and that determines whether a specified customer is an adult or is underage. In this example, you can send the following <tt>POST</tt> request using a REST client or curl utility to add an adult and execute the service:</p>
      <p outputclass="title">
         <b>Example POST request body to add an adult (JSON)</b>
      </p>
      <codeblock outputclass="language-json">
{
  "person": {
    "name": "John Quark",
    "age": 20
  }
}
</codeblock>
      <p outputclass="title">
         <b>Example curl command to add an adult</b>
      </p>
      <codeblock>
curl -X POST http://localhost:8080/persons -H 'content-type: application/json' -H 'accept: application/json' -d '{"person": {"name":"John Quark", "age": 20}}'
</codeblock>
      <p outputclass="title">
         <b>Example response (JSON)</b>
      </p>
      <codeblock outputclass="language-json">
{
  "id": "3af806dd-8819-4734-a934-728f4c819682",
  "person": {
    "name": "John Quark",
    "age": 20,
    "adult": false
  },
  "isAdult": true
}
</codeblock>
      <p>Note that for JSON marshaling, BAMOE is relying on the default mappers of <xref href="https://quarkus.io/guides/rest-json#jackson" scope="external">Quarkus</xref>, which can be configured according to the specific requirements.</p>
      <section id="ref-rest-dmn-endpoints">
         <title>REST endpoints for DMN models in IBM BAMOE</title>
         <p>For each DMN model in a BAMOE application, the following REST endpoints are automatically generated based on the content of the model:</p>
         <ul>
            <li>
               <tt>[POST] /{modelName}</tt>: A business-domain endpoint for evaluating the entire DMN model</li>
            <li>
               <tt>[POST] /{modelName}/{decisionServiceName}</tt>: A business-domain endpoint for evaluating a specified decision service component in the DMN model</li>
            <li>
               <tt>[POST] /{modelName}/dmnresult</tt>: An endpoint for evaluating the entire DMN model and returning a <tt>DMNResult</tt> response, including the business-domain context, helper messages, and helper decision pointers for the DMN model</li>
            <li>
               <tt>[POST] /{modelName}/{decisionServiceName}/dmnresult</tt>: An endpoint for evaluating a specified decision service component in the DMN model and returning a <tt>DMNResult</tt> response, including the business-domain context, helper messages, and helper decision pointers for the decision service</li>
            <li>
               <tt>[GET] /{modelName}</tt>: An endpoint for returning the DMN XML without decision logic, typically for DMN model introspection</li>
         </ul>
         <p>You can use these endpoints to interact with a DMN model or a specific decision service within a model. To help you decide between using business-domain and <tt>dmnresult</tt> variants of these REST endpoints, review the following considerations:</p>
         <ul>
            <li>
               <b>REST business-domain endpoints</b>: Use this endpoint type if a client application only requires a positive evaluation outcome, doesnâ€™t need to parse <tt>Info</tt> or <tt>Warn</tt> messages, and only needs an HTTP 5xx response for any errors. This type of endpoint is also helpful for single-page application-like clients, due to singleton coercion of decision service results that resemble the DMN modeling behavior.</li>
            <li>
               <b>REST <tt>dmnresult</tt> endpoints</b>: Use this endpoint type if a client needs to parse <tt>Info</tt>, <tt>Warn</tt>, or <tt>Error</tt> messages in all cases.</li>
         </ul>
         <p>For each endpoint, use a REST client, curl utility, or Swagger UI (if configured for the application) to send requests with the following components:</p>
         <ul>
            <li>
               <b>Base URL</b>: <tt>http://<i>HOST</i>:<i>PORT</i>/{modelName}</tt>
            </li>
            <li>
               <p>
                  <b>Path parameters</b>:</p>
               <ul>
                  <li>
                     <tt>{modelName}</tt>: The string identifier of the DMN model, such as <tt>Traffic Violation</tt>
                  </li>
                  <li>
                     <tt>{decisionServiceName}</tt>: The string identifier of the decision service component in the DMN DRG, such as <tt>TrafficViolationDecisionService</tt>
                  </li>
                  <li>
                     <tt>dmnresult</tt>: The string identifier that enables the endpoint to return a full <tt>DMNResult</tt> response with more detailed <tt>Info</tt>, <tt>Warn</tt>, and <tt>Error</tt> messaging</li>
               </ul>
            </li>
            <li>
               <p>
                  <b>HTTP headers</b>: For <tt>POST</tt> requests only:</p>
               <ul>
                  <li>
                     <tt>accept</tt>: <tt>application/json</tt>
                  </li>
                  <li>
                     <tt>content-type</tt>: <tt>application/json</tt>
                  </li>
               </ul>
            </li>
            <li>
               <b>HTTP methods</b>: <tt>GET</tt> or <tt>POST</tt>
            </li>
         </ul>
         <p>The examples in the following endpoints are based on a <tt>Traffic Violation</tt> DMN model that contains a <tt>TrafficViolationDecisionService</tt> decision service component.</p>
         <p>For all of these endpoints, if a DMN evaluation <tt>Error</tt> message occurs, a <tt>DMNResult</tt> response is returned along with an HTTP 5xx error. If a DMN <tt>Info</tt> or <tt>Warn</tt> message occurs, the relevant response is returned with the business-domain REST body, in the <tt>X-IBM BAMOE-decision-messages</tt> extended HTTP header, to be used for client-side business logic. When more refined client-side business logic is required, the client can use the <tt>dmnresult</tt> variant of the endpoints.</p>
         <dl>
            <dlentry>
               <dt>Return the DMN XML without decision logic</dt>
               <dd>
                  <div>
                     <p>
                        <tt>[GET] /{modelName}</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example REST endpoint</b>
                     </p>
                     <p>
                        <tt>http://localhost:8080/Traffic Violation</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example curl request</b>
                     </p>
                     <codeblock>
curl -X GET http://localhost:8080/Traffic Violation
</codeblock>
                     <p>The response would be the actual BPMN file.</p>
                  </div>
               </dd>
            </dlentry>
            <dlentry>
               <dt>Evaluate a specified DMN model</dt>
               <dd>
                  <div>
                     <p>
                        <tt>[POST] /{modelName}</tt>
                     </p>
                     <p>For this endpoint, the request body must contain all input data of the DMN model. The response is the resulting DMN context of the model, including the decision values, the original input values, and all other parametric DRG components in serialized form. For example, a business knowledge model is available in string-serialized form in its signature.</p>
                     <fig>
                        <title>Example <tt>Traffic Violation</tt> DMN model</title>
                        <image href="../images/dmn-model-traffic-violation.png" placement="break">
                           <alt>Image of Traffic Violation DMN model</alt>
                        </image>
                     </fig>
                     <p outputclass="title">
                        <b>Example REST endpoint</b>
                     </p>
                     <p>
                        <tt>http://localhost:8080/Traffic Violation</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example POST request body with input data</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "Driver": {
    "Points": 2
  },
  "Violation": {
    "Type": "speed",
    "Actual Speed": 120,
    "Speed Limit": 100
  }
}
</codeblock>
                     <p outputclass="title">
                        <b>Example curl request</b>
                     </p>
                     <codeblock>
curl -X POST http://localhost:8080/Traffic Violation -H 'content-type: application/json' -H 'accept: application/json' -d '{"Driver": {"Points": 2}, "Violation": {"Type": "speed", "Actual Speed": 120, "Speed Limit": 100}}'
</codeblock>
                     <p outputclass="title">
                        <b>Example response (JSON)</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "Violation": {
    "Type": "speed",
    "Speed Limit": 100,
    "Actual Speed": 120
  },
  "Driver": {
    "Points": 2
  },
  "Fine": {
    "Points": 3,
    "Amount": 500
  },
  "Should the driver be suspended?": "No"
}
</codeblock>
                  </div>
               </dd>
            </dlentry>
            <dlentry>
               <dt>Evaluate a specified decision service within a DMN model</dt>
               <dd>
                  <div>
                     <p>
                        <tt>[POST] /{modelName}/{decisionServiceName}</tt>
                     </p>
                     <p>For this endpoint, the request body must contain all the requirements of the decision service. The response is the resulting DMN context of the decision service, including the decision values, the original input values, and all other parametric DRG components in serialized form. For example, a business knowledge model is available in string-serialized form in its signature.</p>
                     <p>If the decision service is composed of a single-output decision, the response is the resulting value of that specific decision. This behavior provides an equivalent value at the API level of a specification feature when invoking the decision service in the model itself. As a result, you can, for example, interact with a DMN decision service from single-page web applications.</p>
                     <fig>
                        <title>Example <tt>TrafficViolationDecisionService</tt> decision service with single-output decision</title>
                        <image href="../images/dmn-model-traffic-violation-single-output.png" placement="break">
                           <alt>Image of decision service in Traffic Violation DMN model</alt>
                        </image>
                     </fig>
                     <fig>
                        <title>Example <tt>TrafficViolationDecisionService</tt> decision service with multiple-output decision</title>
                        <image href="../images/dmn-model-traffic-violation-multi-output.png" placement="break">
                           <alt>Image of decision service in Traffic Violation DMN model</alt>
                        </image>
                     </fig>
                     <p outputclass="title">
                        <b>Example REST endpoint</b>
                     </p>
                     <p>
                        <tt>http://localhost:8080/Traffic Violation/TrafficViolationDecisionService</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example POST request body with input data</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "Driver": {
    "Points": 2
  },
  "Violation": {
    "Type": "speed",
    "Actual Speed": 120,
    "Speed Limit": 100
  }
}
</codeblock>
                     <p outputclass="title">
                        <b>Example curl request</b>
                     </p>
                     <codeblock>
curl -X POST http://localhost:8080/Traffic Violation/TrafficViolationDecisionService -H 'content-type: application/json' -H 'accept: application/json' -d '{"Driver": {"Points": 2}, "Violation": {"Type": "speed", "Actual Speed": 120, "Speed Limit": 100}}'
</codeblock>
                     <p outputclass="title">
                        <b>Example response for single-output decision (JSON)</b>
                     </p>
                     <codeblock outputclass="language-json">
"No"
</codeblock>
                     <p outputclass="title">
                        <b>Example response for multiple-output decision (JSON)</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "Violation": {
    "Type": "speed",
    "Speed Limit": 100,
    "Actual Speed": 120
  },
  "Driver": {
    "Points": 2
  },
  "Fine": {
    "Points": 3,
    "Amount": 500
  },
  "Should the driver be suspended?": "No"
}
</codeblock>
                  </div>
               </dd>
            </dlentry>
            <dlentry>
               <dt>Evaluate a specified DMN model and return a <tt>DMNResult</tt> response</dt>
               <dd>
                  <div>
                     <p>
                        <tt>[POST] /{modelName}/dmnresult</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example REST endpoint</b>
                     </p>
                     <p>
                        <tt>http://localhost:8080/Traffic Violation</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example POST request body with input data</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "Driver": {
    "Points": 2
  },
  "Violation": {
    "Type": "speed",
    "Actual Speed": 120,
    "Speed Limit": 100
  }
}
</codeblock>
                     <p outputclass="title">
                        <b>Example curl request</b>
                     </p>
                     <codeblock>
curl -X POST http://localhost:8080/Traffic Violation -H 'content-type: application/json' -H 'accept: application/json' -d '{"Driver": {"Points": 2}, "Violation": {"Type": "speed", "Actual Speed": 120, "Speed Limit": 100}}'
</codeblock>
                     <p outputclass="title">
                        <b>Example response (JSON)</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "namespace": "https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF",
  "modelName": "Traffic Violation",
  "dmnContext": {
    "Violation": {
      "Type": "speed",
      "Speed Limit": 100,
      "Actual Speed": 120,
      "Code": null,
      "Date": null
    },
    "Driver": {
      "Points": 2,
      "State": null,
      "City": null,
      "Age": null,
      "Name": null
    },
    "Fine": {
      "Points": 3,
      "Amount": 500
    },
    "Should the driver be suspended?": "No"
  },
  "messages": [],
  "decisionResults": [
    {
      "decisionId": "_4055D956-1C47-479C-B3F4-BAEB61F1C929",
      "decisionName": "Fine",
      "result": {
        "Points": 3,
        "Amount": 500
      },
      "messages": [],
      "evaluationStatus": "SUCCEEDED"
    },
    {
      "decisionId": "_8A408366-D8E9-4626-ABF3-5F69AA01F880",
      "decisionName": "Should the driver be suspended?",
      "result": "No",
      "messages": [],
      "evaluationStatus": "SUCCEEDED"
    }
  ]
}
</codeblock>
                  </div>
               </dd>
            </dlentry>
            <dlentry>
               <dt>Evaluate a specified decision service within a DMN model and return a <tt>DMNResult</tt> response</dt>
               <dd>
                  <div>
                     <p>
                        <tt>[POST] /{modelName}/{decisionServiceName}/dmnresult</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example REST endpoint</b>
                     </p>
                     <p>
                        <tt>http://localhost:8080/Traffic Violation/TrafficViolationDecisionService</tt>
                     </p>
                     <p outputclass="title">
                        <b>Example POST request body with input data</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "Driver": {
    "Points": 2
  },
  "Violation": {
    "Type": "speed",
    "Actual Speed": 120,
    "Speed Limit": 100
  }
}
</codeblock>
                     <p outputclass="title">
                        <b>Example curl request</b>
                     </p>
                     <codeblock>
curl -X POST http://localhost:8080/Traffic Violation/TrafficViolationDecisionService -H 'content-type: application/json' -H 'accept: application/json' -d '{"Driver": {"Points": 2}, "Violation": {"Type": "speed", "Actual Speed": 120, "Speed Limit": 100}}'
</codeblock>
                     <p outputclass="title">
                        <b>Example response (JSON)</b>
                     </p>
                     <codeblock outputclass="language-json">
{
  "namespace": "https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF",
  "modelName": "Traffic Violation",
  "dmnContext": {
    "Violation": {
      "Type": "speed",
      "Speed Limit": 100,
      "Actual Speed": 120,
      "Code": null,
      "Date": null
    },
    "Driver": {
      "Points": 2,
      "State": null,
      "City": null,
      "Age": null,
      "Name": null
    },
    "Should the driver be suspended?": "No"
  },
  "messages": [],
  "decisionResults": [
    {
      "decisionId": "_8A408366-D8E9-4626-ABF3-5F69AA01F880",
      "decisionName": "Should the driver be suspended?",
      "result": "No",
      "messages": [],
      "evaluationStatus": "SUCCEEDED"
    }
  ]
}
</codeblock>
                  </div>
               </dd>
            </dlentry>
         </dl>
      </section>
      <section id="_running_the_ibm_bamoe_decision_example_applications">
         <p>To get started with IBM BAMOE, you can run any of the example applications in the bamoe-9.1.1-kogito-examples.zip archive and experiment with the IBM BAMOE services.</p>
         <p>For this procedure, use the <tt>process-decisions-quarkus</tt> application. You can follow similar steps with the other IBM BAMOE examples on Quarkus.</p>
         <p>In the <tt>process-decisions-quarkus</tt> applications, the <tt>traffic-rules-dmn.bpmn</tt> process describes the steps that need to be followed when verifying a driverâ€™s potential suspension.
The process includes a service node to call to a Java service <tt>DriverService.java</tt> that is used to fetch information about a driver using a custom <tt>Driver</tt> object, Business Rule nodes to call decisions defined in <tt>DMN</tt> and <tt>DRL</tt> format as well as script tasks for writing debug information.</p>
         <fig>
            <title>Example <tt>traffic-rules-dmn.bpmn</tt> process</title>
            <image href="../images/traffic-rules-dmn.png" placement="break">
               <alt>Image of `traffic-rules-dmn.bpmn` example process</alt>
            </image>
         </fig>
         <p>The traffic violations process contains license validation as a decision that is created using DRL. The license validation consists of rules that are evaluated to verify that the license is expired or not. The result of the license validation is added for the driver variable. The rule units are declared in the <tt>LicenseValidationService.drl</tt> file and the rule unit data is added to the <tt>LicenseValidationService</tt> class.</p>
         <p>Example <tt>LicenseValidationService.drl</tt> file:</p>
         <codeblock>
unit LicenseValidationService

rule "Is driver license valid"
when
$driver: /driver[licenseExpiration.after(currentTime)]
then
$driver.setValidLicense(true);
end

rule "Is driver license expired"
when
$driver: /driver[licenseExpiration.before(currentTime)]
then
$driver.setValidLicense(false);
end

query "validation"
$driver : /driver
end
</codeblock>
         <p>Example <tt>LicenseValidationService</tt> class:</p>
         <codeblock outputclass="language-java">
public class LicenseValidationService implements RuleUnitData {
private SingletonStore&lt;Driver&gt; driver;

    public LicenseValidationService() {
        this(DataSource.createSingleton());
    }

    public LicenseValidationService(SingletonStore&lt;Driver&gt; driver) {
        this.driver = driver;
    }

    public void setDriver(SingletonStore&lt;Driver&gt; driver) {
        this.driver = driver;
    }

    public SingletonStore&lt;Driver&gt; getDriver() {
        return driver;
    }

    public Date getCurrentTime() {
        return new Date();
    }
}
</codeblock>
         <p>After the license validation task, the traffic violations process contains traffic violation as a decision that is created using DMN. The traffic violation decision verifies whether the driver is suspended or not based on the points in the driverâ€™s license.</p>
         <p>The traffic violation decision is declared in the <tt>TrafficViolation.dmn</tt> file.</p>
         <fig>
            <title>Example <tt>TrafficViolation.dmn</tt> file</title>
            <image href="../images/traffic-violation-dmn.png" placement="break">
               <alt>Image of traffic TrafficViolation.dmn file</alt>
            </image>
         </fig>
         <p>Based on this process, this example service exposes REST operations to create new traffic incidents, to list and delete active traffic incidents, and to invoke the license validation service endpoint.</p>
         <p outputclass="title">
            <b>Procedure</b>
         </p>
         <ol>
            <li>Download the bamoe-9.1.1-kogito-examples.zip archive to a local directory and extract the file.</li>
            <li>In a command terminal, navigate to the extracted <tt>kogito-quarkus-examples/process-decisions-quarkus</tt> folder, and enter one of the following commands to build and run the example.</li>
         </ol>
         <p>Quarkus support the following run modes:</p>
         <ul>
            <li>
               <b>Development mode</b>: For local testing. On Quarkus, development mode also offers live reload of your processes and decisions in your running applications for advanced debugging.</li>
            <li>
               <b>JVM mode</b>: For compatibility with a Java virtual machine (JVM).</li>
            <li>
               <b>Native mode</b>: (Quarkus only, requires GraalVM or Mandrel) For direct binary execution as native code.</li>
         </ul>
         <p>The command that you use depends on your preferred run mode and application environment:</p>
         <ul>
            <li>
               <p>For development mode:</p>
               <p outputclass="title">
                  <b>On Quarkus</b>
               </p>
               <codeblock>
$ mvn clean compile quarkus:dev
</codeblock>
            </li>
            <li>
               <p>For JVM mode:</p>
               <p outputclass="title">
                  <b>On Quarkus</b>
               </p>
               <codeblock>
$ mvn clean package
$ java -jar target/quarkus-app/quarkus-run.jar
</codeblock>
            </li>
            <li>
               <p>For native mode (requires GraalVM or Mandrel):</p>
               <p outputclass="title">
                  <b>On Quarkus only</b>
               </p>
               <codeblock>
$ mvn clean package -Dnative
$ ./target/process-decisions-quarkus-runner
</codeblock>
            </li>
         </ul>
         <ol>
            <li>
               <p>After the IBM BAMOE service is running, use a REST client, curl utility, or the Swagger UI configured for the application - <xref href="http://localhost:8080/q/swagger-ui" scope="external">http://localhost:8080/q/swagger-ui</xref> - to send API requests with the following components:</p>
               <ul>
                  <li>
                     <b>URL</b>: <tt>http://localhost:8080/</tt>
                  </li>
                  <li>
                     <p>
                        <b>HTTP headers</b>: For <tt>POST</tt> and <tt>PUT</tt> requests only:</p>
                     <ul>
                        <li>
                           <tt>accept</tt>: <tt>application/json</tt>
                        </li>
                        <li>
                           <tt>content-type</tt>: <tt>application/json</tt>
                        </li>
                     </ul>
                  </li>
                  <li>
                     <b>HTTP methods</b>: <tt>GET</tt>, <tt>POST</tt>, <tt>PUT</tt> or <tt>DELETE</tt>
                  </li>
               </ul>
            </li>
         </ol>
         <p outputclass="title">
            <b>Example POST request body to create a traffic incident (JSON)</b>
         </p>
         <codeblock outputclass="language-json">
{
    "driverId": "12345",
    "violation":{
        "Type":"speed",
        "Speed Limit": 100,
        "Actual Speed":140
    }
}
</codeblock>
         <p outputclass="title">
            <b>Example curl command to create a traffic incident</b>
         </p>
         <codeblock>
curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{"driverId": "12345","violation":{"Type":"speed","Speed Limit": 100,"Actual Speed":140}}' http://localhost:8080/traffic
</codeblock>
         <p outputclass="title">
            <b>Example response (JSON)</b>
         </p>
         <codeblock outputclass="language-json">
{
   "driver" : {
      "Age" : 30,
      "City" : "Campinas",
      "Name" : "Arthur",
      "Points" : 13,
      "State" : "SP",
      "licenseExpiration" : "2023-06-15T11:02:17.610-06:00",
      "validLicense" : true
   },
   "driverId" : "12345",
   "fine" : {
      "Amount" : 1000,
      "Points" : 7
   },
   "id" : "d9ac9587-40dc-4f0b-8034-274db5bca832",
   "suspended" : "Yes",
   "violation" : {
      "Actual Speed" : 140,
      "Code" : null,
      "Date" : null,
      "Speed Limit" : 100,
      "Type" : "speed"
   }
}
</codeblock>
         <fig>
            <title>Swagger UI to interact with all application endpoints - http://localhost:8080/q/swagger-ui</title>
            <image href="../images/kogito-swagger-example-jbpm.png" placement="break">
               <alt>Image of Swagger UI for example application</alt>
            </image>
         </fig>
         <note type="note">
            <p>For the predefined IBM BAMOE example applications, by default the Swagger UI is only available when Quarkus is started in dev or test mode. If you want to make it available in production too, you can include the following configuration in your <tt>application.properties</tt>:</p>
            <codeblock>
quarkus.swagger-ui.always-include=true
</codeblock>
            <p>This is a build time property, it cannot be changed at runtime after your application is built.</p>
         </note>
      </section>
   </body>
</topic>